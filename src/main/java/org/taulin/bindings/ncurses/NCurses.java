// Generated by jextract

package org.taulin.bindings.ncurses;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class NCurses extends NCurses_1 {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfLong C_LONG = JAVA_LONG;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * #define CURSES 1
     * }
     */
    public static int CURSES() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define CURSES_H 1
     * }
     */
    public static int CURSES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NCURSES_VERSION_MAJOR 6
     * }
     */
    public static int NCURSES_VERSION_MAJOR() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define NCURSES_VERSION_MINOR 4
     * }
     */
    public static int NCURSES_VERSION_MINOR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define NCURSES_VERSION_PATCH 20240113
     * }
     */
    public static int NCURSES_VERSION_PATCH() {
        return (int)20240113L;
    }
    /**
     * {@snippet :
     * #define NCURSES_MOUSE_VERSION 2
     * }
     */
    public static int NCURSES_MOUSE_VERSION() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define NCURSES_DLL_H_incl 1
     * }
     */
    public static int NCURSES_DLL_H_incl() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _STDINT_H 1
     * }
     */
    public static int _STDINT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _FEATURES_H 1
     * }
     */
    public static int _FEATURES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _DEFAULT_SOURCE 1
     * }
     */
    public static int _DEFAULT_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_ISOC2X 0
     * }
     */
    public static int __GLIBC_USE_ISOC2X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __USE_ISOC11 1
     * }
     */
    public static int __USE_ISOC11() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_ISOC99 1
     * }
     */
    public static int __USE_ISOC99() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_ISOC95 1
     * }
     */
    public static int __USE_ISOC95() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX_IMPLICITLY 1
     * }
     */
    public static int __USE_POSIX_IMPLICITLY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SOURCE 1
     * }
     */
    public static int _POSIX_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX 1
     * }
     */
    public static int __USE_POSIX() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX2 1
     * }
     */
    public static int __USE_POSIX2() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX199309 1
     * }
     */
    public static int __USE_POSIX199309() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX199506 1
     * }
     */
    public static int __USE_POSIX199506() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_XOPEN2K 1
     * }
     */
    public static int __USE_XOPEN2K() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_XOPEN2K8 1
     * }
     */
    public static int __USE_XOPEN2K8() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _ATFILE_SOURCE 1
     * }
     */
    public static int _ATFILE_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __WORDSIZE_TIME64_COMPAT32 1
     * }
     */
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __SYSCALL_WORDSIZE 64
     * }
     */
    public static int __SYSCALL_WORDSIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __USE_MISC 1
     * }
     */
    public static int __USE_MISC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_ATFILE 1
     * }
     */
    public static int __USE_ATFILE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_FORTIFY_LEVEL 0
     * }
     */
    public static int __USE_FORTIFY_LEVEL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_DEPRECATED_GETS 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_DEPRECATED_SCANF 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_C2X_STRTOL 0
     * }
     */
    public static int __GLIBC_USE_C2X_STRTOL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _STDC_PREDEF_H 1
     * }
     */
    public static int _STDC_PREDEF_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_559__ 1
     * }
     */
    public static int __STDC_IEC_559__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_559_COMPLEX__ 1
     * }
     */
    public static int __STDC_IEC_559_COMPLEX__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GNU_LIBRARY__ 6
     * }
     */
    public static int __GNU_LIBRARY__() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define __GLIBC__ 2
     * }
     */
    public static int __GLIBC__() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_MINOR__ 39
     * }
     */
    public static int __GLIBC_MINOR__() {
        return (int)39L;
    }
    /**
     * {@snippet :
     * #define _SYS_CDEFS_H 1
     * }
     */
    public static int _SYS_CDEFS_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __glibc_c99_flexarr_available 1
     * }
     */
    public static int __glibc_c99_flexarr_available() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI 0
     * }
     */
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_GENERIC_SELECTION 1
     * }
     */
    public static int __HAVE_GENERIC_SELECTION() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_LIB_EXT2 0
     * }
     */
    public static int __GLIBC_USE_LIB_EXT2() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_TYPES_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _BITS_TYPES_H 1
     * }
     */
    public static int _BITS_TYPES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_TYPESIZES_H 1
     * }
     */
    public static int _BITS_TYPESIZES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __OFF_T_MATCHES_OFF64_T 1
     * }
     */
    public static int __OFF_T_MATCHES_OFF64_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __INO_T_MATCHES_INO64_T 1
     * }
     */
    public static int __INO_T_MATCHES_INO64_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __RLIM_T_MATCHES_RLIM64_T 1
     * }
     */
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __STATFS_MATCHES_STATFS64 1
     * }
     */
    public static int __STATFS_MATCHES_STATFS64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 1
     * }
     */
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __FD_SETSIZE 1024
     * }
     */
    public static int __FD_SETSIZE() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define _BITS_TIME64_H 1
     * }
     */
    public static int _BITS_TIME64_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_WCHAR_H 1
     * }
     */
    public static int _BITS_WCHAR_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_STDINT_INTN_H 1
     * }
     */
    public static int _BITS_STDINT_INTN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_STDINT_UINTN_H 1
     * }
     */
    public static int _BITS_STDINT_UINTN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_STDINT_LEAST_H 1
     * }
     */
    public static int _BITS_STDINT_LEAST_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NCURSES_ENABLE_STDBOOL_H 1
     * }
     */
    public static int NCURSES_ENABLE_STDBOOL_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NCURSES_OPAQUE 1
     * }
     */
    public static int NCURSES_OPAQUE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NCURSES_OPAQUE_FORM 1
     * }
     */
    public static int NCURSES_OPAQUE_FORM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NCURSES_OPAQUE_MENU 1
     * }
     */
    public static int NCURSES_OPAQUE_MENU() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NCURSES_OPAQUE_PANEL 1
     * }
     */
    public static int NCURSES_OPAQUE_PANEL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NCURSES_WATTR_MACROS 0
     * }
     */
    public static int NCURSES_WATTR_MACROS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define NCURSES_REENTRANT 0
     * }
     */
    public static int NCURSES_REENTRANT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define NCURSES_INTEROP_FUNCS 1
     * }
     */
    public static int NCURSES_INTEROP_FUNCS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NCURSES_TPARM_VARARGS 1
     * }
     */
    public static int NCURSES_TPARM_VARARGS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NCURSES_WCWIDTH_GRAPHICS 1
     * }
     */
    public static int NCURSES_WCWIDTH_GRAPHICS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _STDIO_H 1
     * }
     */
    public static int _STDIO_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GNUC_VA_LIST 1
     * }
     */
    public static int __GNUC_VA_LIST() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _____fpos_t_defined 1
     * }
     */
    public static int _____fpos_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define ____mbstate_t_defined 1
     * }
     */
    public static int ____mbstate_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _____fpos64_t_defined 1
     * }
     */
    public static int _____fpos64_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define ____FILE_defined 1
     * }
     */
    public static int ____FILE_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __FILE_defined 1
     * }
     */
    public static int __FILE_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __struct_FILE_defined 1
     * }
     */
    public static int __struct_FILE_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _IO_EOF_SEEN 16
     * }
     */
    public static int _IO_EOF_SEEN() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define _IO_ERR_SEEN 32
     * }
     */
    public static int _IO_ERR_SEEN() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define _IO_USER_LOCK 32768
     * }
     */
    public static int _IO_USER_LOCK() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define __cookie_io_functions_t_defined 1
     * }
     */
    public static int __cookie_io_functions_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _IOFBF 0
     * }
     */
    public static int _IOFBF() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _IOLBF 1
     * }
     */
    public static int _IOLBF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _IONBF 2
     * }
     */
    public static int _IONBF() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define BUFSIZ 8192
     * }
     */
    public static int BUFSIZ() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define SEEK_SET 0
     * }
     */
    public static int SEEK_SET() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define SEEK_CUR 1
     * }
     */
    public static int SEEK_CUR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SEEK_END 2
     * }
     */
    public static int SEEK_END() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define L_tmpnam 20
     * }
     */
    public static int L_tmpnam() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define TMP_MAX 238328
     * }
     */
    public static int TMP_MAX() {
        return (int)238328L;
    }
    /**
     * {@snippet :
     * #define _BITS_STDIO_LIM_H 1
     * }
     */
    public static int _BITS_STDIO_LIM_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FILENAME_MAX 4096
     * }
     */
    public static int FILENAME_MAX() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define L_ctermid 9
     * }
     */
    public static int L_ctermid() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define FOPEN_MAX 16
     * }
     */
    public static int FOPEN_MAX() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT128 0
     * }
     */
    public static int __HAVE_FLOAT128() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT128 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT128() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT64X 1
     * }
     */
    public static int __HAVE_FLOAT64X() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT64X_LONG_DOUBLE 1
     * }
     */
    public static int __HAVE_FLOAT64X_LONG_DOUBLE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT16 0
     * }
     */
    public static int __HAVE_FLOAT16() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT32 1
     * }
     */
    public static int __HAVE_FLOAT32() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT64 1
     * }
     */
    public static int __HAVE_FLOAT64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT32X 1
     * }
     */
    public static int __HAVE_FLOAT32X() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT128X 0
     * }
     */
    public static int __HAVE_FLOAT128X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT32 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT32() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT64 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT64() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT32X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT32X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT64X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT64X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOATN_NOT_TYPEDEF 0
     * }
     */
    public static int __HAVE_FLOATN_NOT_TYPEDEF() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define NCURSES_WIDECHAR 0
     * }
     */
    public static int NCURSES_WIDECHAR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define TRUE 1
     * }
     */
    public static int TRUE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FALSE 0
     * }
     */
    public static int FALSE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define true 1
     * }
     */
    public static int true_() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define false 0
     * }
     */
    public static int false_() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __bool_true_false_are_defined 1
     * }
     */
    public static int __bool_true_false_are_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define COLOR_BLACK 0
     * }
     */
    public static int COLOR_BLACK() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define COLOR_RED 1
     * }
     */
    public static int COLOR_RED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define COLOR_GREEN 2
     * }
     */
    public static int COLOR_GREEN() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define COLOR_YELLOW 3
     * }
     */
    public static int COLOR_YELLOW() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define COLOR_BLUE 4
     * }
     */
    public static int COLOR_BLUE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define COLOR_MAGENTA 5
     * }
     */
    public static int COLOR_MAGENTA() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define COLOR_CYAN 6
     * }
     */
    public static int COLOR_CYAN() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define COLOR_WHITE 7
     * }
     */
    public static int COLOR_WHITE() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define _SUBWIN 1
     * }
     */
    public static int _SUBWIN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _ENDLINE 2
     * }
     */
    public static int _ENDLINE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _FULLWIN 4
     * }
     */
    public static int _FULLWIN() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define _SCROLLWIN 8
     * }
     */
    public static int _SCROLLWIN() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _ISPAD 16
     * }
     */
    public static int _ISPAD() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define _HASMOVED 32
     * }
     */
    public static int _HASMOVED() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define _WRAPPED 64
     * }
     */
    public static int _WRAPPED() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define NCURSES_EXT_FUNCS 20240113
     * }
     */
    public static int NCURSES_EXT_FUNCS() {
        return (int)20240113L;
    }
    /**
     * {@snippet :
     * #define NCURSES_XNAMES 1
     * }
     */
    public static int NCURSES_XNAMES() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NCURSES_SP_FUNCS 20240113
     * }
     */
    public static int NCURSES_SP_FUNCS() {
        return (int)20240113L;
    }
    /**
     * {@snippet :
     * #define NCURSES_ATTR_SHIFT 8
     * }
     */
    public static int NCURSES_ATTR_SHIFT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define KEY_CODE_YES 256
     * }
     */
    public static int KEY_CODE_YES() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define KEY_MIN 257
     * }
     */
    public static int KEY_MIN() {
        return (int)257L;
    }
    /**
     * {@snippet :
     * #define KEY_BREAK 257
     * }
     */
    public static int KEY_BREAK() {
        return (int)257L;
    }
    /**
     * {@snippet :
     * #define KEY_SRESET 344
     * }
     */
    public static int KEY_SRESET() {
        return (int)344L;
    }
    /**
     * {@snippet :
     * #define KEY_RESET 345
     * }
     */
    public static int KEY_RESET() {
        return (int)345L;
    }
    /**
     * {@snippet :
     * #define KEY_DOWN 258
     * }
     */
    public static int KEY_DOWN() {
        return (int)258L;
    }
    /**
     * {@snippet :
     * #define KEY_UP 259
     * }
     */
    public static int KEY_UP() {
        return (int)259L;
    }
    /**
     * {@snippet :
     * #define KEY_LEFT 260
     * }
     */
    public static int KEY_LEFT() {
        return (int)260L;
    }
    /**
     * {@snippet :
     * #define KEY_RIGHT 261
     * }
     */
    public static int KEY_RIGHT() {
        return (int)261L;
    }
    /**
     * {@snippet :
     * #define KEY_HOME 262
     * }
     */
    public static int KEY_HOME() {
        return (int)262L;
    }
    /**
     * {@snippet :
     * #define KEY_BACKSPACE 263
     * }
     */
    public static int KEY_BACKSPACE() {
        return (int)263L;
    }
    /**
     * {@snippet :
     * #define KEY_F0 264
     * }
     */
    public static int KEY_F0() {
        return (int)264L;
    }
    /**
     * {@snippet :
     * #define KEY_DL 328
     * }
     */
    public static int KEY_DL() {
        return (int)328L;
    }
    /**
     * {@snippet :
     * #define KEY_IL 329
     * }
     */
    public static int KEY_IL() {
        return (int)329L;
    }
    /**
     * {@snippet :
     * #define KEY_DC 330
     * }
     */
    public static int KEY_DC() {
        return (int)330L;
    }
    /**
     * {@snippet :
     * #define KEY_IC 331
     * }
     */
    public static int KEY_IC() {
        return (int)331L;
    }
    /**
     * {@snippet :
     * #define KEY_EIC 332
     * }
     */
    public static int KEY_EIC() {
        return (int)332L;
    }
    /**
     * {@snippet :
     * #define KEY_CLEAR 333
     * }
     */
    public static int KEY_CLEAR() {
        return (int)333L;
    }
    /**
     * {@snippet :
     * #define KEY_EOS 334
     * }
     */
    public static int KEY_EOS() {
        return (int)334L;
    }
    /**
     * {@snippet :
     * #define KEY_EOL 335
     * }
     */
    public static int KEY_EOL() {
        return (int)335L;
    }
    /**
     * {@snippet :
     * #define KEY_SF 336
     * }
     */
    public static int KEY_SF() {
        return (int)336L;
    }
    /**
     * {@snippet :
     * #define KEY_SR 337
     * }
     */
    public static int KEY_SR() {
        return (int)337L;
    }
    /**
     * {@snippet :
     * #define KEY_NPAGE 338
     * }
     */
    public static int KEY_NPAGE() {
        return (int)338L;
    }
    /**
     * {@snippet :
     * #define KEY_PPAGE 339
     * }
     */
    public static int KEY_PPAGE() {
        return (int)339L;
    }
    /**
     * {@snippet :
     * #define KEY_STAB 340
     * }
     */
    public static int KEY_STAB() {
        return (int)340L;
    }
    /**
     * {@snippet :
     * #define KEY_CTAB 341
     * }
     */
    public static int KEY_CTAB() {
        return (int)341L;
    }
    /**
     * {@snippet :
     * #define KEY_CATAB 342
     * }
     */
    public static int KEY_CATAB() {
        return (int)342L;
    }
    /**
     * {@snippet :
     * #define KEY_ENTER 343
     * }
     */
    public static int KEY_ENTER() {
        return (int)343L;
    }
    /**
     * {@snippet :
     * #define KEY_PRINT 346
     * }
     */
    public static int KEY_PRINT() {
        return (int)346L;
    }
    /**
     * {@snippet :
     * #define KEY_LL 347
     * }
     */
    public static int KEY_LL() {
        return (int)347L;
    }
    /**
     * {@snippet :
     * #define KEY_A1 348
     * }
     */
    public static int KEY_A1() {
        return (int)348L;
    }
    /**
     * {@snippet :
     * #define KEY_A3 349
     * }
     */
    public static int KEY_A3() {
        return (int)349L;
    }
    /**
     * {@snippet :
     * #define KEY_B2 350
     * }
     */
    public static int KEY_B2() {
        return (int)350L;
    }
    /**
     * {@snippet :
     * #define KEY_C1 351
     * }
     */
    public static int KEY_C1() {
        return (int)351L;
    }
    /**
     * {@snippet :
     * #define KEY_C3 352
     * }
     */
    public static int KEY_C3() {
        return (int)352L;
    }
    /**
     * {@snippet :
     * #define KEY_BTAB 353
     * }
     */
    public static int KEY_BTAB() {
        return (int)353L;
    }
    /**
     * {@snippet :
     * #define KEY_BEG 354
     * }
     */
    public static int KEY_BEG() {
        return (int)354L;
    }
    /**
     * {@snippet :
     * #define KEY_CANCEL 355
     * }
     */
    public static int KEY_CANCEL() {
        return (int)355L;
    }
    /**
     * {@snippet :
     * #define KEY_CLOSE 356
     * }
     */
    public static int KEY_CLOSE() {
        return (int)356L;
    }
    /**
     * {@snippet :
     * #define KEY_COMMAND 357
     * }
     */
    public static int KEY_COMMAND() {
        return (int)357L;
    }
    /**
     * {@snippet :
     * #define KEY_COPY 358
     * }
     */
    public static int KEY_COPY() {
        return (int)358L;
    }
    /**
     * {@snippet :
     * #define KEY_CREATE 359
     * }
     */
    public static int KEY_CREATE() {
        return (int)359L;
    }
    /**
     * {@snippet :
     * #define KEY_END 360
     * }
     */
    public static int KEY_END() {
        return (int)360L;
    }
    /**
     * {@snippet :
     * #define KEY_EXIT 361
     * }
     */
    public static int KEY_EXIT() {
        return (int)361L;
    }
    /**
     * {@snippet :
     * #define KEY_FIND 362
     * }
     */
    public static int KEY_FIND() {
        return (int)362L;
    }
    /**
     * {@snippet :
     * #define KEY_HELP 363
     * }
     */
    public static int KEY_HELP() {
        return (int)363L;
    }
    /**
     * {@snippet :
     * #define KEY_MARK 364
     * }
     */
    public static int KEY_MARK() {
        return (int)364L;
    }
    /**
     * {@snippet :
     * #define KEY_MESSAGE 365
     * }
     */
    public static int KEY_MESSAGE() {
        return (int)365L;
    }
    /**
     * {@snippet :
     * #define KEY_MOVE 366
     * }
     */
    public static int KEY_MOVE() {
        return (int)366L;
    }
    /**
     * {@snippet :
     * #define KEY_NEXT 367
     * }
     */
    public static int KEY_NEXT() {
        return (int)367L;
    }
    /**
     * {@snippet :
     * #define KEY_OPEN 368
     * }
     */
    public static int KEY_OPEN() {
        return (int)368L;
    }
    /**
     * {@snippet :
     * #define KEY_OPTIONS 369
     * }
     */
    public static int KEY_OPTIONS() {
        return (int)369L;
    }
    /**
     * {@snippet :
     * #define KEY_PREVIOUS 370
     * }
     */
    public static int KEY_PREVIOUS() {
        return (int)370L;
    }
    /**
     * {@snippet :
     * #define KEY_REDO 371
     * }
     */
    public static int KEY_REDO() {
        return (int)371L;
    }
    /**
     * {@snippet :
     * #define KEY_REFERENCE 372
     * }
     */
    public static int KEY_REFERENCE() {
        return (int)372L;
    }
    /**
     * {@snippet :
     * #define KEY_REFRESH 373
     * }
     */
    public static int KEY_REFRESH() {
        return (int)373L;
    }
    /**
     * {@snippet :
     * #define KEY_REPLACE 374
     * }
     */
    public static int KEY_REPLACE() {
        return (int)374L;
    }
    /**
     * {@snippet :
     * #define KEY_RESTART 375
     * }
     */
    public static int KEY_RESTART() {
        return (int)375L;
    }
    /**
     * {@snippet :
     * #define KEY_RESUME 376
     * }
     */
    public static int KEY_RESUME() {
        return (int)376L;
    }
    /**
     * {@snippet :
     * #define KEY_SAVE 377
     * }
     */
    public static int KEY_SAVE() {
        return (int)377L;
    }
    /**
     * {@snippet :
     * #define KEY_SBEG 378
     * }
     */
    public static int KEY_SBEG() {
        return (int)378L;
    }
    /**
     * {@snippet :
     * #define KEY_SCANCEL 379
     * }
     */
    public static int KEY_SCANCEL() {
        return (int)379L;
    }
    /**
     * {@snippet :
     * #define KEY_SCOMMAND 380
     * }
     */
    public static int KEY_SCOMMAND() {
        return (int)380L;
    }
    /**
     * {@snippet :
     * #define KEY_SCOPY 381
     * }
     */
    public static int KEY_SCOPY() {
        return (int)381L;
    }
    /**
     * {@snippet :
     * #define KEY_SCREATE 382
     * }
     */
    public static int KEY_SCREATE() {
        return (int)382L;
    }
    /**
     * {@snippet :
     * #define KEY_SDC 383
     * }
     */
    public static int KEY_SDC() {
        return (int)383L;
    }
    /**
     * {@snippet :
     * #define KEY_SDL 384
     * }
     */
    public static int KEY_SDL() {
        return (int)384L;
    }
    /**
     * {@snippet :
     * #define KEY_SELECT 385
     * }
     */
    public static int KEY_SELECT() {
        return (int)385L;
    }
    /**
     * {@snippet :
     * #define KEY_SEND 386
     * }
     */
    public static int KEY_SEND() {
        return (int)386L;
    }
    /**
     * {@snippet :
     * #define KEY_SEOL 387
     * }
     */
    public static int KEY_SEOL() {
        return (int)387L;
    }
    /**
     * {@snippet :
     * #define KEY_SEXIT 388
     * }
     */
    public static int KEY_SEXIT() {
        return (int)388L;
    }
    /**
     * {@snippet :
     * #define KEY_SFIND 389
     * }
     */
    public static int KEY_SFIND() {
        return (int)389L;
    }
    /**
     * {@snippet :
     * #define KEY_SHELP 390
     * }
     */
    public static int KEY_SHELP() {
        return (int)390L;
    }
    /**
     * {@snippet :
     * #define KEY_SHOME 391
     * }
     */
    public static int KEY_SHOME() {
        return (int)391L;
    }
    /**
     * {@snippet :
     * #define KEY_SIC 392
     * }
     */
    public static int KEY_SIC() {
        return (int)392L;
    }
    /**
     * {@snippet :
     * #define KEY_SLEFT 393
     * }
     */
    public static int KEY_SLEFT() {
        return (int)393L;
    }
    /**
     * {@snippet :
     * #define KEY_SMESSAGE 394
     * }
     */
    public static int KEY_SMESSAGE() {
        return (int)394L;
    }
    /**
     * {@snippet :
     * #define KEY_SMOVE 395
     * }
     */
    public static int KEY_SMOVE() {
        return (int)395L;
    }
    /**
     * {@snippet :
     * #define KEY_SNEXT 396
     * }
     */
    public static int KEY_SNEXT() {
        return (int)396L;
    }
    /**
     * {@snippet :
     * #define KEY_SOPTIONS 397
     * }
     */
    public static int KEY_SOPTIONS() {
        return (int)397L;
    }
    /**
     * {@snippet :
     * #define KEY_SPREVIOUS 398
     * }
     */
    public static int KEY_SPREVIOUS() {
        return (int)398L;
    }
    /**
     * {@snippet :
     * #define KEY_SPRINT 399
     * }
     */
    public static int KEY_SPRINT() {
        return (int)399L;
    }
    /**
     * {@snippet :
     * #define KEY_SREDO 400
     * }
     */
    public static int KEY_SREDO() {
        return (int)400L;
    }
    /**
     * {@snippet :
     * #define KEY_SREPLACE 401
     * }
     */
    public static int KEY_SREPLACE() {
        return (int)401L;
    }
    /**
     * {@snippet :
     * #define KEY_SRIGHT 402
     * }
     */
    public static int KEY_SRIGHT() {
        return (int)402L;
    }
    /**
     * {@snippet :
     * #define KEY_SRSUME 403
     * }
     */
    public static int KEY_SRSUME() {
        return (int)403L;
    }
    /**
     * {@snippet :
     * #define KEY_SSAVE 404
     * }
     */
    public static int KEY_SSAVE() {
        return (int)404L;
    }
    /**
     * {@snippet :
     * #define KEY_SSUSPEND 405
     * }
     */
    public static int KEY_SSUSPEND() {
        return (int)405L;
    }
    /**
     * {@snippet :
     * #define KEY_SUNDO 406
     * }
     */
    public static int KEY_SUNDO() {
        return (int)406L;
    }
    /**
     * {@snippet :
     * #define KEY_SUSPEND 407
     * }
     */
    public static int KEY_SUSPEND() {
        return (int)407L;
    }
    /**
     * {@snippet :
     * #define KEY_UNDO 408
     * }
     */
    public static int KEY_UNDO() {
        return (int)408L;
    }
    /**
     * {@snippet :
     * #define KEY_MOUSE 409
     * }
     */
    public static int KEY_MOUSE() {
        return (int)409L;
    }
    /**
     * {@snippet :
     * #define KEY_RESIZE 410
     * }
     */
    public static int KEY_RESIZE() {
        return (int)410L;
    }
    /**
     * {@snippet :
     * #define KEY_MAX 511
     * }
     */
    public static int KEY_MAX() {
        return (int)511L;
    }
    /**
     * {@snippet :
     * #define _XOPEN_CURSES 1
     * }
     */
    public static int _XOPEN_CURSES() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define TRACE_DISABLE 0
     * }
     */
    public static int TRACE_DISABLE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define TRACE_TIMES 1
     * }
     */
    public static int TRACE_TIMES() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define TRACE_TPUTS 2
     * }
     */
    public static int TRACE_TPUTS() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define TRACE_UPDATE 4
     * }
     */
    public static int TRACE_UPDATE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define TRACE_MOVE 8
     * }
     */
    public static int TRACE_MOVE() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define TRACE_CHARPUT 16
     * }
     */
    public static int TRACE_CHARPUT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define TRACE_ORDINARY 31
     * }
     */
    public static int TRACE_ORDINARY() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * #define TRACE_CALLS 32
     * }
     */
    public static int TRACE_CALLS() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define TRACE_VIRTPUT 64
     * }
     */
    public static int TRACE_VIRTPUT() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define TRACE_IEVENT 128
     * }
     */
    public static int TRACE_IEVENT() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define TRACE_BITS 256
     * }
     */
    public static int TRACE_BITS() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define TRACE_ICALLS 512
     * }
     */
    public static int TRACE_ICALLS() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define TRACE_CCALLS 1024
     * }
     */
    public static int TRACE_CCALLS() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define TRACE_DATABASE 2048
     * }
     */
    public static int TRACE_DATABASE() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define TRACE_ATTRS 4096
     * }
     */
    public static int TRACE_ATTRS() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define TRACE_SHIFT 13
     * }
     */
    public static int TRACE_SHIFT() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * #define NCURSES_UNCTRL_H_incl 1
     * }
     */
    public static int NCURSES_UNCTRL_H_incl() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * typedef unsigned char __u_char;
     * }
     */
    public static final OfByte __u_char = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short __u_short;
     * }
     */
    public static final OfShort __u_short = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int __u_int;
     * }
     */
    public static final OfInt __u_int = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __u_long;
     * }
     */
    public static final OfLong __u_long = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char __int8_t;
     * }
     */
    public static final OfByte __int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned char __uint8_t;
     * }
     */
    public static final OfByte __uint8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short __int16_t;
     * }
     */
    public static final OfShort __int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short __uint16_t;
     * }
     */
    public static final OfShort __uint16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int __int32_t;
     * }
     */
    public static final OfInt __int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __uint32_t;
     * }
     */
    public static final OfInt __uint32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __int64_t;
     * }
     */
    public static final OfLong __int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __uint64_t;
     * }
     */
    public static final OfLong __uint64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char __int_least8_t;
     * }
     */
    public static final OfByte __int_least8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned char __uint_least8_t;
     * }
     */
    public static final OfByte __uint_least8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short __int_least16_t;
     * }
     */
    public static final OfShort __int_least16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short __uint_least16_t;
     * }
     */
    public static final OfShort __uint_least16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int __int_least32_t;
     * }
     */
    public static final OfInt __int_least32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __uint_least32_t;
     * }
     */
    public static final OfInt __uint_least32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __int_least64_t;
     * }
     */
    public static final OfLong __int_least64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __uint_least64_t;
     * }
     */
    public static final OfLong __uint_least64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __quad_t;
     * }
     */
    public static final OfLong __quad_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __u_quad_t;
     * }
     */
    public static final OfLong __u_quad_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __intmax_t;
     * }
     */
    public static final OfLong __intmax_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __uintmax_t;
     * }
     */
    public static final OfLong __uintmax_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __dev_t;
     * }
     */
    public static final OfLong __dev_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __uid_t;
     * }
     */
    public static final OfInt __uid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __gid_t;
     * }
     */
    public static final OfInt __gid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __ino_t;
     * }
     */
    public static final OfLong __ino_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __ino64_t;
     * }
     */
    public static final OfLong __ino64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __mode_t;
     * }
     */
    public static final OfInt __mode_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __nlink_t;
     * }
     */
    public static final OfLong __nlink_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __off_t;
     * }
     */
    public static final OfLong __off_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __off64_t;
     * }
     */
    public static final OfLong __off64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int __pid_t;
     * }
     */
    public static final OfInt __pid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __clock_t;
     * }
     */
    public static final OfLong __clock_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __rlim_t;
     * }
     */
    public static final OfLong __rlim_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __rlim64_t;
     * }
     */
    public static final OfLong __rlim64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __id_t;
     * }
     */
    public static final OfInt __id_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __time_t;
     * }
     */
    public static final OfLong __time_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __useconds_t;
     * }
     */
    public static final OfInt __useconds_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __suseconds_t;
     * }
     */
    public static final OfLong __suseconds_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __suseconds64_t;
     * }
     */
    public static final OfLong __suseconds64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int __daddr_t;
     * }
     */
    public static final OfInt __daddr_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __key_t;
     * }
     */
    public static final OfInt __key_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __clockid_t;
     * }
     */
    public static final OfInt __clockid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef void* __timer_t;
     * }
     */
    public static final AddressLayout __timer_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef long __blksize_t;
     * }
     */
    public static final OfLong __blksize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __blkcnt_t;
     * }
     */
    public static final OfLong __blkcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __blkcnt64_t;
     * }
     */
    public static final OfLong __blkcnt64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __fsblkcnt_t;
     * }
     */
    public static final OfLong __fsblkcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __fsblkcnt64_t;
     * }
     */
    public static final OfLong __fsblkcnt64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __fsfilcnt_t;
     * }
     */
    public static final OfLong __fsfilcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __fsfilcnt64_t;
     * }
     */
    public static final OfLong __fsfilcnt64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __fsword_t;
     * }
     */
    public static final OfLong __fsword_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __ssize_t;
     * }
     */
    public static final OfLong __ssize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __syscall_slong_t;
     * }
     */
    public static final OfLong __syscall_slong_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __syscall_ulong_t;
     * }
     */
    public static final OfLong __syscall_ulong_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __loff_t;
     * }
     */
    public static final OfLong __loff_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef char* __caddr_t;
     * }
     */
    public static final AddressLayout __caddr_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef long __intptr_t;
     * }
     */
    public static final OfLong __intptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __socklen_t;
     * }
     */
    public static final OfInt __socklen_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __sig_atomic_t;
     * }
     */
    public static final OfInt __sig_atomic_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef signed char int8_t;
     * }
     */
    public static final OfByte int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short int16_t;
     * }
     */
    public static final OfShort int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int int32_t;
     * }
     */
    public static final OfInt int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long int64_t;
     * }
     */
    public static final OfLong int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char uint8_t;
     * }
     */
    public static final OfByte uint8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short uint16_t;
     * }
     */
    public static final OfShort uint16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int uint32_t;
     * }
     */
    public static final OfInt uint32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long uint64_t;
     * }
     */
    public static final OfLong uint64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char int_least8_t;
     * }
     */
    public static final OfByte int_least8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short int_least16_t;
     * }
     */
    public static final OfShort int_least16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int int_least32_t;
     * }
     */
    public static final OfInt int_least32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long int_least64_t;
     * }
     */
    public static final OfLong int_least64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char uint_least8_t;
     * }
     */
    public static final OfByte uint_least8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short uint_least16_t;
     * }
     */
    public static final OfShort uint_least16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int uint_least32_t;
     * }
     */
    public static final OfInt uint_least32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long uint_least64_t;
     * }
     */
    public static final OfLong uint_least64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char int_fast8_t;
     * }
     */
    public static final OfByte int_fast8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef long int_fast16_t;
     * }
     */
    public static final OfLong int_fast16_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long int_fast32_t;
     * }
     */
    public static final OfLong int_fast32_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long int_fast64_t;
     * }
     */
    public static final OfLong int_fast64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char uint_fast8_t;
     * }
     */
    public static final OfByte uint_fast8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned long uint_fast16_t;
     * }
     */
    public static final OfLong uint_fast16_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long uint_fast32_t;
     * }
     */
    public static final OfLong uint_fast32_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long uint_fast64_t;
     * }
     */
    public static final OfLong uint_fast64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long intptr_t;
     * }
     */
    public static final OfLong intptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long uintptr_t;
     * }
     */
    public static final OfLong uintptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long intmax_t;
     * }
     */
    public static final OfLong intmax_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long uintmax_t;
     * }
     */
    public static final OfLong uintmax_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int chtype;
     * }
     */
    public static final OfInt chtype = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int mmask_t;
     * }
     */
    public static final OfInt mmask_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long size_t;
     * }
     */
    public static final OfLong size_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long off_t;
     * }
     */
    public static final OfLong off_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long ssize_t;
     * }
     */
    public static final OfLong ssize_t = JAVA_LONG;
    public static MemoryLayout stdin$LAYOUT() {
        return RuntimeHelper.POINTER;
    }
    public static VarHandle stdin$VH() {
        return constants$8.const$4;
    }
    public static MemorySegment stdin$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$8.const$5,"stdin");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * FILE* stdin;
     * }
     */
    public static MemorySegment stdin$get() {
        return (java.lang.foreign.MemorySegment) constants$8.const$4.get(RuntimeHelper.requireNonNull(constants$8.const$5, "stdin"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * FILE* stdin;
     * }
     */
    public static void stdin$set(MemorySegment x) {
        constants$8.const$4.set(RuntimeHelper.requireNonNull(constants$8.const$5, "stdin"), x);
    }
    public static MemoryLayout stdout$LAYOUT() {
        return RuntimeHelper.POINTER;
    }
    public static VarHandle stdout$VH() {
        return constants$8.const$4;
    }
    public static MemorySegment stdout$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$9.const$0,"stdout");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * FILE* stdout;
     * }
     */
    public static MemorySegment stdout$get() {
        return (java.lang.foreign.MemorySegment) constants$8.const$4.get(RuntimeHelper.requireNonNull(constants$9.const$0, "stdout"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * FILE* stdout;
     * }
     */
    public static void stdout$set(MemorySegment x) {
        constants$8.const$4.set(RuntimeHelper.requireNonNull(constants$9.const$0, "stdout"), x);
    }
    public static MemoryLayout stderr$LAYOUT() {
        return RuntimeHelper.POINTER;
    }
    public static VarHandle stderr$VH() {
        return constants$8.const$4;
    }
    public static MemorySegment stderr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$9.const$1,"stderr");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * FILE* stderr;
     * }
     */
    public static MemorySegment stderr$get() {
        return (java.lang.foreign.MemorySegment) constants$8.const$4.get(RuntimeHelper.requireNonNull(constants$9.const$1, "stderr"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * FILE* stderr;
     * }
     */
    public static void stderr$set(MemorySegment x) {
        constants$8.const$4.set(RuntimeHelper.requireNonNull(constants$9.const$1, "stderr"), x);
    }
    public static MethodHandle remove$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$2,"remove");
    }
    /**
     * {@snippet :
     * int remove(char* __filename);
     * }
     */
    public static int remove(MemorySegment __filename) {
        var mh$ = remove$MH();
        try {
            return (int)mh$.invokeExact(__filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rename$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$4,"rename");
    }
    /**
     * {@snippet :
     * int rename(char* __old, char* __new);
     * }
     */
    public static int rename(MemorySegment __old, MemorySegment __new) {
        var mh$ = rename$MH();
        try {
            return (int)mh$.invokeExact(__old, __new);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle renameat$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$6,"renameat");
    }
    /**
     * {@snippet :
     * int renameat(int __oldfd, char* __old, int __newfd, char* __new);
     * }
     */
    public static int renameat(int __oldfd, MemorySegment __old, int __newfd, MemorySegment __new) {
        var mh$ = renameat$MH();
        try {
            return (int)mh$.invokeExact(__oldfd, __old, __newfd, __new);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fclose$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$0,"fclose");
    }
    /**
     * {@snippet :
     * int fclose(FILE* __stream);
     * }
     */
    public static int fclose(MemorySegment __stream) {
        var mh$ = fclose$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpfile$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$2,"tmpfile");
    }
    /**
     * {@snippet :
     * FILE* tmpfile();
     * }
     */
    public static MemorySegment tmpfile() {
        var mh$ = tmpfile$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpnam$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$4,"tmpnam");
    }
    /**
     * {@snippet :
     * char* tmpnam(char [20]);
     * }
     */
    public static MemorySegment tmpnam(MemorySegment x0) {
        var mh$ = tmpnam$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpnam_r$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$5,"tmpnam_r");
    }
    /**
     * {@snippet :
     * char* tmpnam_r(char __s[20]);
     * }
     */
    public static MemorySegment tmpnam_r(MemorySegment __s) {
        var mh$ = tmpnam_r$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tempnam$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$1,"tempnam");
    }
    /**
     * {@snippet :
     * char* tempnam(char* __dir, char* __pfx);
     * }
     */
    public static MemorySegment tempnam(MemorySegment __dir, MemorySegment __pfx) {
        var mh$ = tempnam$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dir, __pfx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fflush$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$2,"fflush");
    }
    /**
     * {@snippet :
     * int fflush(FILE* __stream);
     * }
     */
    public static int fflush(MemorySegment __stream) {
        var mh$ = fflush$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fflush_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$3,"fflush_unlocked");
    }
    /**
     * {@snippet :
     * int fflush_unlocked(FILE* __stream);
     * }
     */
    public static int fflush_unlocked(MemorySegment __stream) {
        var mh$ = fflush_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fopen$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$4,"fopen");
    }
    /**
     * {@snippet :
     * FILE* fopen(char* __filename, char* __modes);
     * }
     */
    public static MemorySegment fopen(MemorySegment __filename, MemorySegment __modes) {
        var mh$ = fopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__filename, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle freopen$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$6,"freopen");
    }
    /**
     * {@snippet :
     * FILE* freopen(char* __filename, char* __modes, FILE* __stream);
     * }
     */
    public static MemorySegment freopen(MemorySegment __filename, MemorySegment __modes, MemorySegment __stream) {
        var mh$ = freopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__filename, __modes, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdopen$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$1,"fdopen");
    }
    /**
     * {@snippet :
     * FILE* fdopen(int __fd, char* __modes);
     * }
     */
    public static MemorySegment fdopen(int __fd, MemorySegment __modes) {
        var mh$ = fdopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__fd, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fopencookie$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$3,"fopencookie");
    }
    /**
     * {@snippet :
     * FILE* fopencookie(void* __magic_cookie, char* __modes, cookie_io_functions_t __io_funcs);
     * }
     */
    public static MemorySegment fopencookie(MemorySegment __magic_cookie, MemorySegment __modes, MemorySegment __io_funcs) {
        var mh$ = fopencookie$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__magic_cookie, __modes, __io_funcs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmemopen$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$5,"fmemopen");
    }
    /**
     * {@snippet :
     * FILE* fmemopen(void* __s, size_t __len, char* __modes);
     * }
     */
    public static MemorySegment fmemopen(MemorySegment __s, long __len, MemorySegment __modes) {
        var mh$ = fmemopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __len, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle open_memstream$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$0,"open_memstream");
    }
    /**
     * {@snippet :
     * FILE* open_memstream(char** __bufloc, size_t* __sizeloc);
     * }
     */
    public static MemorySegment open_memstream(MemorySegment __bufloc, MemorySegment __sizeloc) {
        var mh$ = open_memstream$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__bufloc, __sizeloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$2,"setbuf");
    }
    /**
     * {@snippet :
     * void setbuf(FILE* __stream, char* __buf);
     * }
     */
    public static void setbuf(MemorySegment __stream, MemorySegment __buf) {
        var mh$ = setbuf$MH();
        try {
            mh$.invokeExact(__stream, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setvbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$4,"setvbuf");
    }
    /**
     * {@snippet :
     * int setvbuf(FILE* __stream, char* __buf, int __modes, size_t __n);
     * }
     */
    public static int setvbuf(MemorySegment __stream, MemorySegment __buf, int __modes, long __n) {
        var mh$ = setvbuf$MH();
        try {
            return (int)mh$.invokeExact(__stream, __buf, __modes, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setbuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$6,"setbuffer");
    }
    /**
     * {@snippet :
     * void setbuffer(FILE* __stream, char* __buf, size_t __size);
     * }
     */
    public static void setbuffer(MemorySegment __stream, MemorySegment __buf, long __size) {
        var mh$ = setbuffer$MH();
        try {
            mh$.invokeExact(__stream, __buf, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setlinebuf$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$1,"setlinebuf");
    }
    /**
     * {@snippet :
     * void setlinebuf(FILE* __stream);
     * }
     */
    public static void setlinebuf(MemorySegment __stream) {
        var mh$ = setlinebuf$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$2,"fprintf");
    }
    /**
     * {@snippet :
     * int fprintf(FILE* __stream, char* __format,...);
     * }
     */
    public static int fprintf(MemorySegment __stream, MemorySegment __format, Object... x2) {
        var mh$ = fprintf$MH();
        try {
            return (int)mh$.invokeExact(__stream, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle printf$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$3,"printf");
    }
    /**
     * {@snippet :
     * int printf(char* __format,...);
     * }
     */
    public static int printf(MemorySegment __format, Object... x1) {
        var mh$ = printf$MH();
        try {
            return (int)mh$.invokeExact(__format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$4,"sprintf");
    }
    /**
     * {@snippet :
     * int sprintf(char* __s, char* __format,...);
     * }
     */
    public static int sprintf(MemorySegment __s, MemorySegment __format, Object... x2) {
        var mh$ = sprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$6,"vfprintf");
    }
    /**
     * {@snippet :
     * int vfprintf(FILE* __s, char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vfprintf(MemorySegment __s, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vfprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$0,"vprintf");
    }
    /**
     * {@snippet :
     * int vprintf(char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vprintf(MemorySegment __format, MemorySegment __arg) {
        var mh$ = vprintf$MH();
        try {
            return (int)mh$.invokeExact(__format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$1,"vsprintf");
    }
    /**
     * {@snippet :
     * int vsprintf(char* __s, char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vsprintf(MemorySegment __s, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vsprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle snprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$3,"snprintf");
    }
    /**
     * {@snippet :
     * int snprintf(char* __s, size_t __maxlen, char* __format,...);
     * }
     */
    public static int snprintf(MemorySegment __s, long __maxlen, MemorySegment __format, Object... x3) {
        var mh$ = snprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __maxlen, __format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsnprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$5,"vsnprintf");
    }
    /**
     * {@snippet :
     * int vsnprintf(char* __s, size_t __maxlen, char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vsnprintf(MemorySegment __s, long __maxlen, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vsnprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __maxlen, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vasprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$0,"vasprintf");
    }
    /**
     * {@snippet :
     * int vasprintf(char** __ptr, char* __f, __gnuc_va_list __arg);
     * }
     */
    public static int vasprintf(MemorySegment __ptr, MemorySegment __f, MemorySegment __arg) {
        var mh$ = vasprintf$MH();
        try {
            return (int)mh$.invokeExact(__ptr, __f, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __asprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$1,"__asprintf");
    }
    /**
     * {@snippet :
     * int __asprintf(char** __ptr, char* __fmt,...);
     * }
     */
    public static int __asprintf(MemorySegment __ptr, MemorySegment __fmt, Object... x2) {
        var mh$ = __asprintf$MH();
        try {
            return (int)mh$.invokeExact(__ptr, __fmt, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$2,"asprintf");
    }
    /**
     * {@snippet :
     * int asprintf(char** __ptr, char* __fmt,...);
     * }
     */
    public static int asprintf(MemorySegment __ptr, MemorySegment __fmt, Object... x2) {
        var mh$ = asprintf$MH();
        try {
            return (int)mh$.invokeExact(__ptr, __fmt, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vdprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$4,"vdprintf");
    }
    /**
     * {@snippet :
     * int vdprintf(int __fd, char* __fmt, __gnuc_va_list __arg);
     * }
     */
    public static int vdprintf(int __fd, MemorySegment __fmt, MemorySegment __arg) {
        var mh$ = vdprintf$MH();
        try {
            return (int)mh$.invokeExact(__fd, __fmt, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$6,"dprintf");
    }
    /**
     * {@snippet :
     * int dprintf(int __fd, char* __fmt,...);
     * }
     */
    public static int dprintf(int __fd, MemorySegment __fmt, Object... x2) {
        var mh$ = dprintf$MH();
        try {
            return (int)mh$.invokeExact(__fd, __fmt, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$0,"fscanf");
    }
    /**
     * {@snippet :
     * int fscanf(FILE* __stream, char* __format,...);
     * }
     */
    public static int fscanf(MemorySegment __stream, MemorySegment __format, Object... x2) {
        var mh$ = fscanf$MH();
        try {
            return (int)mh$.invokeExact(__stream, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scanf$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$1,"scanf");
    }
    /**
     * {@snippet :
     * int scanf(char* __format,...);
     * }
     */
    public static int scanf(MemorySegment __format, Object... x1) {
        var mh$ = scanf$MH();
        try {
            return (int)mh$.invokeExact(__format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$2,"sscanf");
    }
    /**
     * {@snippet :
     * int sscanf(char* __s, char* __format,...);
     * }
     */
    public static int sscanf(MemorySegment __s, MemorySegment __format, Object... x2) {
        var mh$ = sscanf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef float _Float32;
     * }
     */
    public static final OfFloat _Float32 = JAVA_FLOAT;
    /**
     * {@snippet :
     * typedef double _Float64;
     * }
     */
    public static final OfDouble _Float64 = JAVA_DOUBLE;
    /**
     * {@snippet :
     * typedef double _Float32x;
     * }
     */
    public static final OfDouble _Float32x = JAVA_DOUBLE;
    public static MethodHandle vfscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$3,"vfscanf");
    }
    /**
     * {@snippet :
     * int vfscanf(FILE* __s, char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vfscanf(MemorySegment __s, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vfscanf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$4,"vscanf");
    }
    /**
     * {@snippet :
     * int vscanf(char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vscanf(MemorySegment __format, MemorySegment __arg) {
        var mh$ = vscanf$MH();
        try {
            return (int)mh$.invokeExact(__format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$5,"vsscanf");
    }
    /**
     * {@snippet :
     * int vsscanf(char* __s, char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vsscanf(MemorySegment __s, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vsscanf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetc$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$0,"fgetc");
    }
    /**
     * {@snippet :
     * int fgetc(FILE* __stream);
     * }
     */
    public static int fgetc(MemorySegment __stream) {
        var mh$ = fgetc$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getc$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$1,"getc");
    }
    /**
     * {@snippet :
     * int getc(FILE* __stream);
     * }
     */
    public static int getc(MemorySegment __stream) {
        var mh$ = getc$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getchar$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$3,"getchar");
    }
    /**
     * {@snippet :
     * int getchar();
     * }
     */
    public static int getchar() {
        var mh$ = getchar$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$4,"getc_unlocked");
    }
    /**
     * {@snippet :
     * int getc_unlocked(FILE* __stream);
     * }
     */
    public static int getc_unlocked(MemorySegment __stream) {
        var mh$ = getc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$5,"getchar_unlocked");
    }
    /**
     * {@snippet :
     * int getchar_unlocked();
     * }
     */
    public static int getchar_unlocked() {
        var mh$ = getchar_unlocked$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$0,"fgetc_unlocked");
    }
    /**
     * {@snippet :
     * int fgetc_unlocked(FILE* __stream);
     * }
     */
    public static int fgetc_unlocked(MemorySegment __stream) {
        var mh$ = fgetc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputc$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$1,"fputc");
    }
    /**
     * {@snippet :
     * int fputc(int __c, FILE* __stream);
     * }
     */
    public static int fputc(int __c, MemorySegment __stream) {
        var mh$ = fputc$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putc$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$2,"putc");
    }
    /**
     * {@snippet :
     * int putc(int __c, FILE* __stream);
     * }
     */
    public static int putc(int __c, MemorySegment __stream) {
        var mh$ = putc$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putchar$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$4,"putchar");
    }
    /**
     * {@snippet :
     * int putchar(int __c);
     * }
     */
    public static int putchar(int __c) {
        var mh$ = putchar$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$5,"fputc_unlocked");
    }
    /**
     * {@snippet :
     * int fputc_unlocked(int __c, FILE* __stream);
     * }
     */
    public static int fputc_unlocked(int __c, MemorySegment __stream) {
        var mh$ = fputc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$0,"putc_unlocked");
    }
    /**
     * {@snippet :
     * int putc_unlocked(int __c, FILE* __stream);
     * }
     */
    public static int putc_unlocked(int __c, MemorySegment __stream) {
        var mh$ = putc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$1,"putchar_unlocked");
    }
    /**
     * {@snippet :
     * int putchar_unlocked(int __c);
     * }
     */
    public static int putchar_unlocked(int __c) {
        var mh$ = putchar_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getw$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$2,"getw");
    }
    /**
     * {@snippet :
     * int getw(FILE* __stream);
     * }
     */
    public static int getw(MemorySegment __stream) {
        var mh$ = getw$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putw$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$3,"putw");
    }
    /**
     * {@snippet :
     * int putw(int __w, FILE* __stream);
     * }
     */
    public static int putw(int __w, MemorySegment __stream) {
        var mh$ = putw$MH();
        try {
            return (int)mh$.invokeExact(__w, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgets$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$5,"fgets");
    }
    /**
     * {@snippet :
     * char* fgets(char* __s, int __n, FILE* __stream);
     * }
     */
    public static MemorySegment fgets(MemorySegment __s, int __n, MemorySegment __stream) {
        var mh$ = fgets$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __getdelim$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$1,"__getdelim");
    }
    /**
     * {@snippet :
     * __ssize_t __getdelim(char** __lineptr, size_t* __n, int __delimiter, FILE* __stream);
     * }
     */
    public static long __getdelim(MemorySegment __lineptr, MemorySegment __n, int __delimiter, MemorySegment __stream) {
        var mh$ = __getdelim$MH();
        try {
            return (long)mh$.invokeExact(__lineptr, __n, __delimiter, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdelim$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$2,"getdelim");
    }
    /**
     * {@snippet :
     * __ssize_t getdelim(char** __lineptr, size_t* __n, int __delimiter, FILE* __stream);
     * }
     */
    public static long getdelim(MemorySegment __lineptr, MemorySegment __n, int __delimiter, MemorySegment __stream) {
        var mh$ = getdelim$MH();
        try {
            return (long)mh$.invokeExact(__lineptr, __n, __delimiter, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getline$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$4,"getline");
    }
    /**
     * {@snippet :
     * __ssize_t getline(char** __lineptr, size_t* __n, FILE* __stream);
     * }
     */
    public static long getline(MemorySegment __lineptr, MemorySegment __n, MemorySegment __stream) {
        var mh$ = getline$MH();
        try {
            return (long)mh$.invokeExact(__lineptr, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputs$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$5,"fputs");
    }
    /**
     * {@snippet :
     * int fputs(char* __s, FILE* __stream);
     * }
     */
    public static int fputs(MemorySegment __s, MemorySegment __stream) {
        var mh$ = fputs$MH();
        try {
            return (int)mh$.invokeExact(__s, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle puts$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$0,"puts");
    }
    /**
     * {@snippet :
     * int puts(char* __s);
     * }
     */
    public static int puts(MemorySegment __s) {
        var mh$ = puts$MH();
        try {
            return (int)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ungetc$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$1,"ungetc");
    }
    /**
     * {@snippet :
     * int ungetc(int __c, FILE* __stream);
     * }
     */
    public static int ungetc(int __c, MemorySegment __stream) {
        var mh$ = ungetc$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fread$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$3,"fread");
    }
    /**
     * {@snippet :
     * unsigned long fread(void* __ptr, size_t __size, size_t __n, FILE* __stream);
     * }
     */
    public static long fread(MemorySegment __ptr, long __size, long __n, MemorySegment __stream) {
        var mh$ = fread$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$4,"fwrite");
    }
    /**
     * {@snippet :
     * unsigned long fwrite(void* __ptr, size_t __size, size_t __n, FILE* __s);
     * }
     */
    public static long fwrite(MemorySegment __ptr, long __size, long __n, MemorySegment __s) {
        var mh$ = fwrite$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fread_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$5,"fread_unlocked");
    }
    /**
     * {@snippet :
     * size_t fread_unlocked(void* __ptr, size_t __size, size_t __n, FILE* __stream);
     * }
     */
    public static long fread_unlocked(MemorySegment __ptr, long __size, long __n, MemorySegment __stream) {
        var mh$ = fread_unlocked$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fwrite_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$0,"fwrite_unlocked");
    }
    /**
     * {@snippet :
     * size_t fwrite_unlocked(void* __ptr, size_t __size, size_t __n, FILE* __stream);
     * }
     */
    public static long fwrite_unlocked(MemorySegment __ptr, long __size, long __n, MemorySegment __stream) {
        var mh$ = fwrite_unlocked$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fseek$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$2,"fseek");
    }
    /**
     * {@snippet :
     * int fseek(FILE* __stream, long __off, int __whence);
     * }
     */
    public static int fseek(MemorySegment __stream, long __off, int __whence) {
        var mh$ = fseek$MH();
        try {
            return (int)mh$.invokeExact(__stream, __off, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftell$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$4,"ftell");
    }
    /**
     * {@snippet :
     * long ftell(FILE* __stream);
     * }
     */
    public static long ftell(MemorySegment __stream) {
        var mh$ = ftell$MH();
        try {
            return (long)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rewind$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$5,"rewind");
    }
    /**
     * {@snippet :
     * void rewind(FILE* __stream);
     * }
     */
    public static void rewind(MemorySegment __stream) {
        var mh$ = rewind$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fseeko$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$0,"fseeko");
    }
    /**
     * {@snippet :
     * int fseeko(FILE* __stream, __off_t __off, int __whence);
     * }
     */
    public static int fseeko(MemorySegment __stream, long __off, int __whence) {
        var mh$ = fseeko$MH();
        try {
            return (int)mh$.invokeExact(__stream, __off, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftello$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$1,"ftello");
    }
    /**
     * {@snippet :
     * __off_t ftello(FILE* __stream);
     * }
     */
    public static long ftello(MemorySegment __stream) {
        var mh$ = ftello$MH();
        try {
            return (long)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$2,"fgetpos");
    }
    /**
     * {@snippet :
     * int fgetpos(FILE* __stream, fpos_t* __pos);
     * }
     */
    public static int fgetpos(MemorySegment __stream, MemorySegment __pos) {
        var mh$ = fgetpos$MH();
        try {
            return (int)mh$.invokeExact(__stream, __pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fsetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$3,"fsetpos");
    }
    /**
     * {@snippet :
     * int fsetpos(FILE* __stream, const fpos_t* __pos);
     * }
     */
    public static int fsetpos(MemorySegment __stream, MemorySegment __pos) {
        var mh$ = fsetpos$MH();
        try {
            return (int)mh$.invokeExact(__stream, __pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearerr$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$4,"clearerr");
    }
    /**
     * {@snippet :
     * void clearerr(FILE* __stream);
     * }
     */
    public static void clearerr(MemorySegment __stream) {
        var mh$ = clearerr$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle feof$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$5,"feof");
    }
    /**
     * {@snippet :
     * int feof(FILE* __stream);
     * }
     */
    public static int feof(MemorySegment __stream) {
        var mh$ = feof$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ferror$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$0,"ferror");
    }
    /**
     * {@snippet :
     * int ferror(FILE* __stream);
     * }
     */
    public static int ferror(MemorySegment __stream) {
        var mh$ = ferror$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearerr_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$1,"clearerr_unlocked");
    }
    /**
     * {@snippet :
     * void clearerr_unlocked(FILE* __stream);
     * }
     */
    public static void clearerr_unlocked(MemorySegment __stream) {
        var mh$ = clearerr_unlocked$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle feof_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$2,"feof_unlocked");
    }
    /**
     * {@snippet :
     * int feof_unlocked(FILE* __stream);
     * }
     */
    public static int feof_unlocked(MemorySegment __stream) {
        var mh$ = feof_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ferror_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$3,"ferror_unlocked");
    }
    /**
     * {@snippet :
     * int ferror_unlocked(FILE* __stream);
     * }
     */
    public static int ferror_unlocked(MemorySegment __stream) {
        var mh$ = ferror_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle perror$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$4,"perror");
    }
    /**
     * {@snippet :
     * void perror(char* __s);
     * }
     */
    public static void perror(MemorySegment __s) {
        var mh$ = perror$MH();
        try {
            mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fileno$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$5,"fileno");
    }
    /**
     * {@snippet :
     * int fileno(FILE* __stream);
     * }
     */
    public static int fileno(MemorySegment __stream) {
        var mh$ = fileno$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fileno_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$0,"fileno_unlocked");
    }
    /**
     * {@snippet :
     * int fileno_unlocked(FILE* __stream);
     * }
     */
    public static int fileno_unlocked(MemorySegment __stream) {
        var mh$ = fileno_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pclose$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$1,"pclose");
    }
    /**
     * {@snippet :
     * int pclose(FILE* __stream);
     * }
     */
    public static int pclose(MemorySegment __stream) {
        var mh$ = pclose$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle popen$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$2,"popen");
    }
    /**
     * {@snippet :
     * FILE* popen(char* __command, char* __modes);
     * }
     */
    public static MemorySegment popen(MemorySegment __command, MemorySegment __modes) {
        var mh$ = popen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__command, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctermid$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$3,"ctermid");
    }
    /**
     * {@snippet :
     * char* ctermid(char* __s);
     * }
     */
    public static MemorySegment ctermid(MemorySegment __s) {
        var mh$ = ctermid$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle flockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$4,"flockfile");
    }
    /**
     * {@snippet :
     * void flockfile(FILE* __stream);
     * }
     */
    public static void flockfile(MemorySegment __stream) {
        var mh$ = flockfile$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftrylockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$5,"ftrylockfile");
    }
    /**
     * {@snippet :
     * int ftrylockfile(FILE* __stream);
     * }
     */
    public static int ftrylockfile(MemorySegment __stream) {
        var mh$ = ftrylockfile$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle funlockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$0,"funlockfile");
    }
    /**
     * {@snippet :
     * void funlockfile(FILE* __stream);
     * }
     */
    public static void funlockfile(MemorySegment __stream) {
        var mh$ = funlockfile$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uflow$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$1,"__uflow");
    }
    /**
     * {@snippet :
     * int __uflow(FILE*);
     * }
     */
    public static int __uflow(MemorySegment x0) {
        var mh$ = __uflow$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __overflow$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$3,"__overflow");
    }
    /**
     * {@snippet :
     * int __overflow(FILE*, int);
     * }
     */
    public static int __overflow(MemorySegment x0, int x1) {
        var mh$ = __overflow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned char NCURSES_BOOL;
     * }
     */
    public static final OfByte NCURSES_BOOL = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned int attr_t;
     * }
     */
    public static final OfInt attr_t = JAVA_INT;
    public static MethodHandle addch$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$0,"addch");
    }
    /**
     * {@snippet :
     * int addch(const chtype);
     * }
     */
    public static int addch(int x0) {
        var mh$ = addch$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle addchnstr$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$1,"addchnstr");
    }
    /**
     * {@snippet :
     * int addchnstr(const chtype*, int);
     * }
     */
    public static int addchnstr(MemorySegment x0, int x1) {
        var mh$ = addchnstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle addchstr$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$2,"addchstr");
    }
    /**
     * {@snippet :
     * int addchstr(const chtype*);
     * }
     */
    public static int addchstr(MemorySegment x0) {
        var mh$ = addchstr$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle addnstr$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$3,"addnstr");
    }
    /**
     * {@snippet :
     * int addnstr(char*, int);
     * }
     */
    public static int addnstr(MemorySegment x0, int x1) {
        var mh$ = addnstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle addstr$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$4,"addstr");
    }
    /**
     * {@snippet :
     * int addstr(char*);
     * }
     */
    public static int addstr(MemorySegment x0) {
        var mh$ = addstr$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle attroff$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$5,"attroff");
    }
    /**
     * {@snippet :
     * int attroff(int);
     * }
     */
    public static int attroff(int x0) {
        var mh$ = attroff$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle attron$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$0,"attron");
    }
    /**
     * {@snippet :
     * int attron(int);
     * }
     */
    public static int attron(int x0) {
        var mh$ = attron$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle attrset$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$1,"attrset");
    }
    /**
     * {@snippet :
     * int attrset(int);
     * }
     */
    public static int attrset(int x0) {
        var mh$ = attrset$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle attr_get$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$2,"attr_get");
    }
    /**
     * {@snippet :
     * int attr_get(attr_t*, short*, void*);
     * }
     */
    public static int attr_get(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = attr_get$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle attr_off$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$3,"attr_off");
    }
    /**
     * {@snippet :
     * int attr_off(attr_t, void*);
     * }
     */
    public static int attr_off(int x0, MemorySegment x1) {
        var mh$ = attr_off$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle attr_on$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$4,"attr_on");
    }
    /**
     * {@snippet :
     * int attr_on(attr_t, void*);
     * }
     */
    public static int attr_on(int x0, MemorySegment x1) {
        var mh$ = attr_on$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle attr_set$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$6,"attr_set");
    }
    /**
     * {@snippet :
     * int attr_set(attr_t, short, void*);
     * }
     */
    public static int attr_set(int x0, short x1, MemorySegment x2) {
        var mh$ = attr_set$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle baudrate$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$0,"baudrate");
    }
    /**
     * {@snippet :
     * int baudrate();
     * }
     */
    public static int baudrate() {
        var mh$ = baudrate$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle beep$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$1,"beep");
    }
    /**
     * {@snippet :
     * int beep();
     * }
     */
    public static int beep() {
        var mh$ = beep$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bkgd$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$2,"bkgd");
    }
    /**
     * {@snippet :
     * int bkgd(chtype);
     * }
     */
    public static int bkgd(int x0) {
        var mh$ = bkgd$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bkgdset$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$4,"bkgdset");
    }
    /**
     * {@snippet :
     * void bkgdset(chtype);
     * }
     */
    public static void bkgdset(int x0) {
        var mh$ = bkgdset$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle border$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$6,"border");
    }
    /**
     * {@snippet :
     * int border(chtype, chtype, chtype, chtype, chtype, chtype, chtype, chtype);
     * }
     */
    public static int border(int x0, int x1, int x2, int x3, int x4, int x5, int x6, int x7) {
        var mh$ = border$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle box$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$1,"box");
    }
    /**
     * {@snippet :
     * int box(WINDOW*, chtype, chtype);
     * }
     */
    public static int box(MemorySegment x0, int x1, int x2) {
        var mh$ = box$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle can_change_color$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$3,"can_change_color");
    }
    /**
     * {@snippet :
     * _Bool can_change_color();
     * }
     */
    public static boolean can_change_color() {
        var mh$ = can_change_color$MH();
        try {
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cbreak$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$4,"cbreak");
    }
    /**
     * {@snippet :
     * int cbreak();
     * }
     */
    public static int cbreak() {
        var mh$ = cbreak$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chgat$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$6,"chgat");
    }
    /**
     * {@snippet :
     * int chgat(int, attr_t, short, void*);
     * }
     */
    public static int chgat(int x0, int x1, short x2, MemorySegment x3) {
        var mh$ = chgat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clear$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$0,"clear");
    }
    /**
     * {@snippet :
     * int clear();
     * }
     */
    public static int clear() {
        var mh$ = clear$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearok$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$2,"clearok");
    }
    /**
     * {@snippet :
     * int clearok(WINDOW*, _Bool);
     * }
     */
    public static int clearok(MemorySegment x0, boolean x1) {
        var mh$ = clearok$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clrtobot$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$3,"clrtobot");
    }
    /**
     * {@snippet :
     * int clrtobot();
     * }
     */
    public static int clrtobot() {
        var mh$ = clrtobot$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clrtoeol$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$4,"clrtoeol");
    }
    /**
     * {@snippet :
     * int clrtoeol();
     * }
     */
    public static int clrtoeol() {
        var mh$ = clrtoeol$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle color_content$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$6,"color_content");
    }
    /**
     * {@snippet :
     * int color_content(short, short*, short*, short*);
     * }
     */
    public static int color_content(short x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = color_content$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle color_set$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$1,"color_set");
    }
    /**
     * {@snippet :
     * int color_set(short, void*);
     * }
     */
    public static int color_set(short x0, MemorySegment x1) {
        var mh$ = color_set$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle COLOR_PAIR$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$2,"COLOR_PAIR");
    }
    /**
     * {@snippet :
     * int COLOR_PAIR(int);
     * }
     */
    public static int COLOR_PAIR(int x0) {
        var mh$ = COLOR_PAIR$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle copywin$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$4,"copywin");
    }
    /**
     * {@snippet :
     * int copywin(const WINDOW*, WINDOW*, int, int, int, int, int, int, int);
     * }
     */
    public static int copywin(MemorySegment x0, MemorySegment x1, int x2, int x3, int x4, int x5, int x6, int x7, int x8) {
        var mh$ = copywin$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curs_set$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$5,"curs_set");
    }
    /**
     * {@snippet :
     * int curs_set(int);
     * }
     */
    public static int curs_set(int x0) {
        var mh$ = curs_set$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle def_prog_mode$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$0,"def_prog_mode");
    }
    /**
     * {@snippet :
     * int def_prog_mode();
     * }
     */
    public static int def_prog_mode() {
        var mh$ = def_prog_mode$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle def_shell_mode$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$1,"def_shell_mode");
    }
    /**
     * {@snippet :
     * int def_shell_mode();
     * }
     */
    public static int def_shell_mode() {
        var mh$ = def_shell_mode$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle delay_output$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$2,"delay_output");
    }
    /**
     * {@snippet :
     * int delay_output(int);
     * }
     */
    public static int delay_output(int x0) {
        var mh$ = delay_output$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle delch$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$3,"delch");
    }
    /**
     * {@snippet :
     * int delch();
     * }
     */
    public static int delch() {
        var mh$ = delch$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle delscreen$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$4,"delscreen");
    }
    /**
     * {@snippet :
     * void delscreen(SCREEN*);
     * }
     */
    public static void delscreen(MemorySegment x0) {
        var mh$ = delscreen$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle delwin$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$5,"delwin");
    }
    /**
     * {@snippet :
     * int delwin(WINDOW*);
     * }
     */
    public static int delwin(MemorySegment x0) {
        var mh$ = delwin$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle deleteln$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$0,"deleteln");
    }
    /**
     * {@snippet :
     * int deleteln();
     * }
     */
    public static int deleteln() {
        var mh$ = deleteln$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle derwin$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$2,"derwin");
    }
    /**
     * {@snippet :
     * WINDOW* derwin(WINDOW*, int, int, int, int);
     * }
     */
    public static MemorySegment derwin(MemorySegment x0, int x1, int x2, int x3, int x4) {
        var mh$ = derwin$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle doupdate$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$3,"doupdate");
    }
    /**
     * {@snippet :
     * int doupdate();
     * }
     */
    public static int doupdate() {
        var mh$ = doupdate$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dupwin$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$4,"dupwin");
    }
    /**
     * {@snippet :
     * WINDOW* dupwin(WINDOW*);
     * }
     */
    public static MemorySegment dupwin(MemorySegment x0) {
        var mh$ = dupwin$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle echo$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$5,"echo");
    }
    /**
     * {@snippet :
     * int echo();
     * }
     */
    public static int echo() {
        var mh$ = echo$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle echochar$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$0,"echochar");
    }
    /**
     * {@snippet :
     * int echochar(const chtype);
     * }
     */
    public static int echochar(int x0) {
        var mh$ = echochar$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erase$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$1,"erase");
    }
    /**
     * {@snippet :
     * int erase();
     * }
     */
    public static int erase() {
        var mh$ = erase$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle endwin$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$2,"endwin");
    }
    /**
     * {@snippet :
     * int endwin();
     * }
     */
    public static int endwin() {
        var mh$ = endwin$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erasechar$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$4,"erasechar");
    }
    /**
     * {@snippet :
     * char erasechar();
     * }
     */
    public static byte erasechar() {
        var mh$ = erasechar$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle filter$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$6,"filter");
    }
    /**
     * {@snippet :
     * void filter();
     * }
     */
    public static void filter() {
        var mh$ = filter$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle flash$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$0,"flash");
    }
    /**
     * {@snippet :
     * int flash();
     * }
     */
    public static int flash() {
        var mh$ = flash$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle flushinp$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$1,"flushinp");
    }
    /**
     * {@snippet :
     * int flushinp();
     * }
     */
    public static int flushinp() {
        var mh$ = flushinp$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getbkgd$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$2,"getbkgd");
    }
    /**
     * {@snippet :
     * chtype getbkgd(WINDOW*);
     * }
     */
    public static int getbkgd(MemorySegment x0) {
        var mh$ = getbkgd$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getch$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$3,"getch");
    }
    /**
     * {@snippet :
     * int getch();
     * }
     */
    public static int getch() {
        var mh$ = getch$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getnstr$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$4,"getnstr");
    }
    /**
     * {@snippet :
     * int getnstr(char*, int);
     * }
     */
    public static int getnstr(MemorySegment x0, int x1) {
        var mh$ = getnstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getstr$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$5,"getstr");
    }
    /**
     * {@snippet :
     * int getstr(char*);
     * }
     */
    public static int getstr(MemorySegment x0) {
        var mh$ = getstr$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getwin$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$0,"getwin");
    }
    /**
     * {@snippet :
     * WINDOW* getwin(FILE*);
     * }
     */
    public static MemorySegment getwin(MemorySegment x0) {
        var mh$ = getwin$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle halfdelay$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$1,"halfdelay");
    }
    /**
     * {@snippet :
     * int halfdelay(int);
     * }
     */
    public static int halfdelay(int x0) {
        var mh$ = halfdelay$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle has_colors$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$2,"has_colors");
    }
    /**
     * {@snippet :
     * _Bool has_colors();
     * }
     */
    public static boolean has_colors() {
        var mh$ = has_colors$MH();
        try {
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle has_ic$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$3,"has_ic");
    }
    /**
     * {@snippet :
     * _Bool has_ic();
     * }
     */
    public static boolean has_ic() {
        var mh$ = has_ic$MH();
        try {
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle has_il$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$4,"has_il");
    }
    /**
     * {@snippet :
     * _Bool has_il();
     * }
     */
    public static boolean has_il() {
        var mh$ = has_il$MH();
        try {
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle hline$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$6,"hline");
    }
    /**
     * {@snippet :
     * int hline(chtype, int);
     * }
     */
    public static int hline(int x0, int x1) {
        var mh$ = hline$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle idcok$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$1,"idcok");
    }
    /**
     * {@snippet :
     * void idcok(WINDOW*, _Bool);
     * }
     */
    public static void idcok(MemorySegment x0, boolean x1) {
        var mh$ = idcok$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle idlok$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$2,"idlok");
    }
    /**
     * {@snippet :
     * int idlok(WINDOW*, _Bool);
     * }
     */
    public static int idlok(MemorySegment x0, boolean x1) {
        var mh$ = idlok$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle immedok$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$3,"immedok");
    }
    /**
     * {@snippet :
     * void immedok(WINDOW*, _Bool);
     * }
     */
    public static void immedok(MemorySegment x0, boolean x1) {
        var mh$ = immedok$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle inch$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$4,"inch");
    }
    /**
     * {@snippet :
     * chtype inch();
     * }
     */
    public static int inch() {
        var mh$ = inch$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle inchnstr$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$5,"inchnstr");
    }
    /**
     * {@snippet :
     * int inchnstr(chtype*, int);
     * }
     */
    public static int inchnstr(MemorySegment x0, int x1) {
        var mh$ = inchnstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle inchstr$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$0,"inchstr");
    }
    /**
     * {@snippet :
     * int inchstr(chtype*);
     * }
     */
    public static int inchstr(MemorySegment x0) {
        var mh$ = inchstr$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initscr$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$1,"initscr");
    }
    /**
     * {@snippet :
     * WINDOW* initscr();
     * }
     */
    public static MemorySegment initscr() {
        var mh$ = initscr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle init_color$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$3,"init_color");
    }
    /**
     * {@snippet :
     * int init_color(short, short, short, short);
     * }
     */
    public static int init_color(short x0, short x1, short x2, short x3) {
        var mh$ = init_color$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle init_pair$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$5,"init_pair");
    }
    /**
     * {@snippet :
     * int init_pair(short, short, short);
     * }
     */
    public static int init_pair(short x0, short x1, short x2) {
        var mh$ = init_pair$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle innstr$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$0,"innstr");
    }
    /**
     * {@snippet :
     * int innstr(char*, int);
     * }
     */
    public static int innstr(MemorySegment x0, int x1) {
        var mh$ = innstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle insch$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$1,"insch");
    }
    /**
     * {@snippet :
     * int insch(chtype);
     * }
     */
    public static int insch(int x0) {
        var mh$ = insch$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle insdelln$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$2,"insdelln");
    }
    /**
     * {@snippet :
     * int insdelln(int);
     * }
     */
    public static int insdelln(int x0) {
        var mh$ = insdelln$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle insertln$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$3,"insertln");
    }
    /**
     * {@snippet :
     * int insertln();
     * }
     */
    public static int insertln() {
        var mh$ = insertln$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle insnstr$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$4,"insnstr");
    }
    /**
     * {@snippet :
     * int insnstr(char*, int);
     * }
     */
    public static int insnstr(MemorySegment x0, int x1) {
        var mh$ = insnstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle insstr$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$5,"insstr");
    }
    /**
     * {@snippet :
     * int insstr(char*);
     * }
     */
    public static int insstr(MemorySegment x0) {
        var mh$ = insstr$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle instr$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$0,"instr");
    }
    /**
     * {@snippet :
     * int instr(char*);
     * }
     */
    public static int instr(MemorySegment x0) {
        var mh$ = instr$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle intrflush$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$1,"intrflush");
    }
    /**
     * {@snippet :
     * int intrflush(WINDOW*, _Bool);
     * }
     */
    public static int intrflush(MemorySegment x0, boolean x1) {
        var mh$ = intrflush$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isendwin$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$2,"isendwin");
    }
    /**
     * {@snippet :
     * _Bool isendwin();
     * }
     */
    public static boolean isendwin() {
        var mh$ = isendwin$MH();
        try {
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle is_linetouched$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$4,"is_linetouched");
    }
    /**
     * {@snippet :
     * _Bool is_linetouched(WINDOW*, int);
     * }
     */
    public static boolean is_linetouched(MemorySegment x0, int x1) {
        var mh$ = is_linetouched$MH();
        try {
            return (boolean)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle is_wintouched$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$6,"is_wintouched");
    }
    /**
     * {@snippet :
     * _Bool is_wintouched(WINDOW*);
     * }
     */
    public static boolean is_wintouched(MemorySegment x0) {
        var mh$ = is_wintouched$MH();
        try {
            return (boolean)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle keyname$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$1,"keyname");
    }
    /**
     * {@snippet :
     * char* keyname(int);
     * }
     */
    public static MemorySegment keyname(int x0) {
        var mh$ = keyname$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle keypad$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$2,"keypad");
    }
    /**
     * {@snippet :
     * int keypad(WINDOW*, _Bool);
     * }
     */
    public static int keypad(MemorySegment x0, boolean x1) {
        var mh$ = keypad$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle killchar$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$3,"killchar");
    }
    /**
     * {@snippet :
     * char killchar();
     * }
     */
    public static byte killchar() {
        var mh$ = killchar$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle leaveok$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$4,"leaveok");
    }
    /**
     * {@snippet :
     * int leaveok(WINDOW*, _Bool);
     * }
     */
    public static int leaveok(MemorySegment x0, boolean x1) {
        var mh$ = leaveok$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle longname$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$5,"longname");
    }
    /**
     * {@snippet :
     * char* longname();
     * }
     */
    public static MemorySegment longname() {
        var mh$ = longname$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle meta$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$0,"meta");
    }
    /**
     * {@snippet :
     * int meta(WINDOW*, _Bool);
     * }
     */
    public static int meta(MemorySegment x0, boolean x1) {
        var mh$ = meta$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle move$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$1,"move");
    }
    /**
     * {@snippet :
     * int move(int, int);
     * }
     */
    public static int move(int x0, int x1) {
        var mh$ = move$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvaddch$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$3,"mvaddch");
    }
    /**
     * {@snippet :
     * int mvaddch(int, int, const chtype);
     * }
     */
    public static int mvaddch(int x0, int x1, int x2) {
        var mh$ = mvaddch$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvaddchnstr$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$5,"mvaddchnstr");
    }
    /**
     * {@snippet :
     * int mvaddchnstr(int, int, const chtype*, int);
     * }
     */
    public static int mvaddchnstr(int x0, int x1, MemorySegment x2, int x3) {
        var mh$ = mvaddchnstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvaddchstr$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$1,"mvaddchstr");
    }
    /**
     * {@snippet :
     * int mvaddchstr(int, int, const chtype*);
     * }
     */
    public static int mvaddchstr(int x0, int x1, MemorySegment x2) {
        var mh$ = mvaddchstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvaddnstr$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$2,"mvaddnstr");
    }
    /**
     * {@snippet :
     * int mvaddnstr(int, int, char*, int);
     * }
     */
    public static int mvaddnstr(int x0, int x1, MemorySegment x2, int x3) {
        var mh$ = mvaddnstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvaddstr$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$3,"mvaddstr");
    }
    /**
     * {@snippet :
     * int mvaddstr(int, int, char*);
     * }
     */
    public static int mvaddstr(int x0, int x1, MemorySegment x2) {
        var mh$ = mvaddstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvchgat$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$5,"mvchgat");
    }
    /**
     * {@snippet :
     * int mvchgat(int, int, int, attr_t, short, void*);
     * }
     */
    public static int mvchgat(int x0, int x1, int x2, int x3, short x4, MemorySegment x5) {
        var mh$ = mvchgat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvcur$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$1,"mvcur");
    }
    /**
     * {@snippet :
     * int mvcur(int, int, int, int);
     * }
     */
    public static int mvcur(int x0, int x1, int x2, int x3) {
        var mh$ = mvcur$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvdelch$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$2,"mvdelch");
    }
    /**
     * {@snippet :
     * int mvdelch(int, int);
     * }
     */
    public static int mvdelch(int x0, int x1) {
        var mh$ = mvdelch$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvderwin$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$3,"mvderwin");
    }
    /**
     * {@snippet :
     * int mvderwin(WINDOW*, int, int);
     * }
     */
    public static int mvderwin(MemorySegment x0, int x1, int x2) {
        var mh$ = mvderwin$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvgetch$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$4,"mvgetch");
    }
    /**
     * {@snippet :
     * int mvgetch(int, int);
     * }
     */
    public static int mvgetch(int x0, int x1) {
        var mh$ = mvgetch$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvgetnstr$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$5,"mvgetnstr");
    }
    /**
     * {@snippet :
     * int mvgetnstr(int, int, char*, int);
     * }
     */
    public static int mvgetnstr(int x0, int x1, MemorySegment x2, int x3) {
        var mh$ = mvgetnstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvgetstr$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$0,"mvgetstr");
    }
    /**
     * {@snippet :
     * int mvgetstr(int, int, char*);
     * }
     */
    public static int mvgetstr(int x0, int x1, MemorySegment x2) {
        var mh$ = mvgetstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvhline$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$1,"mvhline");
    }
    /**
     * {@snippet :
     * int mvhline(int, int, chtype, int);
     * }
     */
    public static int mvhline(int x0, int x1, int x2, int x3) {
        var mh$ = mvhline$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvinch$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$2,"mvinch");
    }
    /**
     * {@snippet :
     * chtype mvinch(int, int);
     * }
     */
    public static int mvinch(int x0, int x1) {
        var mh$ = mvinch$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvinchnstr$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$3,"mvinchnstr");
    }
    /**
     * {@snippet :
     * int mvinchnstr(int, int, chtype*, int);
     * }
     */
    public static int mvinchnstr(int x0, int x1, MemorySegment x2, int x3) {
        var mh$ = mvinchnstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvinchstr$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$4,"mvinchstr");
    }
    /**
     * {@snippet :
     * int mvinchstr(int, int, chtype*);
     * }
     */
    public static int mvinchstr(int x0, int x1, MemorySegment x2) {
        var mh$ = mvinchstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvinnstr$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$5,"mvinnstr");
    }
    /**
     * {@snippet :
     * int mvinnstr(int, int, char*, int);
     * }
     */
    public static int mvinnstr(int x0, int x1, MemorySegment x2, int x3) {
        var mh$ = mvinnstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvinsch$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$0,"mvinsch");
    }
    /**
     * {@snippet :
     * int mvinsch(int, int, chtype);
     * }
     */
    public static int mvinsch(int x0, int x1, int x2) {
        var mh$ = mvinsch$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvinsnstr$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$1,"mvinsnstr");
    }
    /**
     * {@snippet :
     * int mvinsnstr(int, int, char*, int);
     * }
     */
    public static int mvinsnstr(int x0, int x1, MemorySegment x2, int x3) {
        var mh$ = mvinsnstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvinsstr$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$2,"mvinsstr");
    }
    /**
     * {@snippet :
     * int mvinsstr(int, int, char*);
     * }
     */
    public static int mvinsstr(int x0, int x1, MemorySegment x2) {
        var mh$ = mvinsstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvinstr$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$3,"mvinstr");
    }
    /**
     * {@snippet :
     * int mvinstr(int, int, char*);
     * }
     */
    public static int mvinstr(int x0, int x1, MemorySegment x2) {
        var mh$ = mvinstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvprintw$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$4,"mvprintw");
    }
    /**
     * {@snippet :
     * int mvprintw(int, int, char*,...);
     * }
     */
    public static int mvprintw(int x0, int x1, MemorySegment x2, Object... x3) {
        var mh$ = mvprintw$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvscanw$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$5,"mvscanw");
    }
    /**
     * {@snippet :
     * int mvscanw(int, int, char*,...);
     * }
     */
    public static int mvscanw(int x0, int x1, MemorySegment x2, Object... x3) {
        var mh$ = mvscanw$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvvline$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$0,"mvvline");
    }
    /**
     * {@snippet :
     * int mvvline(int, int, chtype, int);
     * }
     */
    public static int mvvline(int x0, int x1, int x2, int x3) {
        var mh$ = mvvline$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvwaddch$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$2,"mvwaddch");
    }
    /**
     * {@snippet :
     * int mvwaddch(WINDOW*, int, int, const chtype);
     * }
     */
    public static int mvwaddch(MemorySegment x0, int x1, int x2, int x3) {
        var mh$ = mvwaddch$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvwaddchnstr$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$4,"mvwaddchnstr");
    }
    /**
     * {@snippet :
     * int mvwaddchnstr(WINDOW*, int, int, const chtype*, int);
     * }
     */
    public static int mvwaddchnstr(MemorySegment x0, int x1, int x2, MemorySegment x3, int x4) {
        var mh$ = mvwaddchnstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvwaddchstr$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$6,"mvwaddchstr");
    }
    /**
     * {@snippet :
     * int mvwaddchstr(WINDOW*, int, int, const chtype*);
     * }
     */
    public static int mvwaddchstr(MemorySegment x0, int x1, int x2, MemorySegment x3) {
        var mh$ = mvwaddchstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvwaddnstr$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$0,"mvwaddnstr");
    }
    /**
     * {@snippet :
     * int mvwaddnstr(WINDOW*, int, int, char*, int);
     * }
     */
    public static int mvwaddnstr(MemorySegment x0, int x1, int x2, MemorySegment x3, int x4) {
        var mh$ = mvwaddnstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvwaddstr$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$1,"mvwaddstr");
    }
    /**
     * {@snippet :
     * int mvwaddstr(WINDOW*, int, int, char*);
     * }
     */
    public static int mvwaddstr(MemorySegment x0, int x1, int x2, MemorySegment x3) {
        var mh$ = mvwaddstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvwchgat$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$3,"mvwchgat");
    }
    /**
     * {@snippet :
     * int mvwchgat(WINDOW*, int, int, int, attr_t, short, void*);
     * }
     */
    public static int mvwchgat(MemorySegment x0, int x1, int x2, int x3, int x4, short x5, MemorySegment x6) {
        var mh$ = mvwchgat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvwdelch$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$4,"mvwdelch");
    }
    /**
     * {@snippet :
     * int mvwdelch(WINDOW*, int, int);
     * }
     */
    public static int mvwdelch(MemorySegment x0, int x1, int x2) {
        var mh$ = mvwdelch$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvwgetch$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$5,"mvwgetch");
    }
    /**
     * {@snippet :
     * int mvwgetch(WINDOW*, int, int);
     * }
     */
    public static int mvwgetch(MemorySegment x0, int x1, int x2) {
        var mh$ = mvwgetch$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvwgetnstr$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$0,"mvwgetnstr");
    }
    /**
     * {@snippet :
     * int mvwgetnstr(WINDOW*, int, int, char*, int);
     * }
     */
    public static int mvwgetnstr(MemorySegment x0, int x1, int x2, MemorySegment x3, int x4) {
        var mh$ = mvwgetnstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvwgetstr$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$1,"mvwgetstr");
    }
    /**
     * {@snippet :
     * int mvwgetstr(WINDOW*, int, int, char*);
     * }
     */
    public static int mvwgetstr(MemorySegment x0, int x1, int x2, MemorySegment x3) {
        var mh$ = mvwgetstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvwhline$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$3,"mvwhline");
    }
    /**
     * {@snippet :
     * int mvwhline(WINDOW*, int, int, chtype, int);
     * }
     */
    public static int mvwhline(MemorySegment x0, int x1, int x2, int x3, int x4) {
        var mh$ = mvwhline$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvwin$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$4,"mvwin");
    }
    /**
     * {@snippet :
     * int mvwin(WINDOW*, int, int);
     * }
     */
    public static int mvwin(MemorySegment x0, int x1, int x2) {
        var mh$ = mvwin$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvwinch$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$5,"mvwinch");
    }
    /**
     * {@snippet :
     * chtype mvwinch(WINDOW*, int, int);
     * }
     */
    public static int mvwinch(MemorySegment x0, int x1, int x2) {
        var mh$ = mvwinch$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvwinchnstr$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$0,"mvwinchnstr");
    }
    /**
     * {@snippet :
     * int mvwinchnstr(WINDOW*, int, int, chtype*, int);
     * }
     */
    public static int mvwinchnstr(MemorySegment x0, int x1, int x2, MemorySegment x3, int x4) {
        var mh$ = mvwinchnstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvwinchstr$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$1,"mvwinchstr");
    }
    /**
     * {@snippet :
     * int mvwinchstr(WINDOW*, int, int, chtype*);
     * }
     */
    public static int mvwinchstr(MemorySegment x0, int x1, int x2, MemorySegment x3) {
        var mh$ = mvwinchstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvwinnstr$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$2,"mvwinnstr");
    }
    /**
     * {@snippet :
     * int mvwinnstr(WINDOW*, int, int, char*, int);
     * }
     */
    public static int mvwinnstr(MemorySegment x0, int x1, int x2, MemorySegment x3, int x4) {
        var mh$ = mvwinnstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvwinsch$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$3,"mvwinsch");
    }
    /**
     * {@snippet :
     * int mvwinsch(WINDOW*, int, int, chtype);
     * }
     */
    public static int mvwinsch(MemorySegment x0, int x1, int x2, int x3) {
        var mh$ = mvwinsch$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvwinsnstr$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$4,"mvwinsnstr");
    }
    /**
     * {@snippet :
     * int mvwinsnstr(WINDOW*, int, int, char*, int);
     * }
     */
    public static int mvwinsnstr(MemorySegment x0, int x1, int x2, MemorySegment x3, int x4) {
        var mh$ = mvwinsnstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvwinsstr$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$5,"mvwinsstr");
    }
    /**
     * {@snippet :
     * int mvwinsstr(WINDOW*, int, int, char*);
     * }
     */
    public static int mvwinsstr(MemorySegment x0, int x1, int x2, MemorySegment x3) {
        var mh$ = mvwinsstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvwinstr$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$0,"mvwinstr");
    }
    /**
     * {@snippet :
     * int mvwinstr(WINDOW*, int, int, char*);
     * }
     */
    public static int mvwinstr(MemorySegment x0, int x1, int x2, MemorySegment x3) {
        var mh$ = mvwinstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvwprintw$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$1,"mvwprintw");
    }
    /**
     * {@snippet :
     * int mvwprintw(WINDOW*, int, int, char*,...);
     * }
     */
    public static int mvwprintw(MemorySegment x0, int x1, int x2, MemorySegment x3, Object... x4) {
        var mh$ = mvwprintw$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvwscanw$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$2,"mvwscanw");
    }
    /**
     * {@snippet :
     * int mvwscanw(WINDOW*, int, int, char*,...);
     * }
     */
    public static int mvwscanw(MemorySegment x0, int x1, int x2, MemorySegment x3, Object... x4) {
        var mh$ = mvwscanw$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvwvline$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$3,"mvwvline");
    }
    /**
     * {@snippet :
     * int mvwvline(WINDOW*, int, int, chtype, int);
     * }
     */
    public static int mvwvline(MemorySegment x0, int x1, int x2, int x3, int x4) {
        var mh$ = mvwvline$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle napms$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$4,"napms");
    }
    /**
     * {@snippet :
     * int napms(int);
     * }
     */
    public static int napms(int x0) {
        var mh$ = napms$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle newpad$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$6,"newpad");
    }
    /**
     * {@snippet :
     * WINDOW* newpad(int, int);
     * }
     */
    public static MemorySegment newpad(int x0, int x1) {
        var mh$ = newpad$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle newterm$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$0,"newterm");
    }
    /**
     * {@snippet :
     * SCREEN* newterm(char*, FILE*, FILE*);
     * }
     */
    public static MemorySegment newterm(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = newterm$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle newwin$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$2,"newwin");
    }
    /**
     * {@snippet :
     * WINDOW* newwin(int, int, int, int);
     * }
     */
    public static MemorySegment newwin(int x0, int x1, int x2, int x3) {
        var mh$ = newwin$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nl$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$3,"nl");
    }
    /**
     * {@snippet :
     * int nl();
     * }
     */
    public static int nl() {
        var mh$ = nl$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nocbreak$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$4,"nocbreak");
    }
    /**
     * {@snippet :
     * int nocbreak();
     * }
     */
    public static int nocbreak() {
        var mh$ = nocbreak$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nodelay$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$5,"nodelay");
    }
    /**
     * {@snippet :
     * int nodelay(WINDOW*, _Bool);
     * }
     */
    public static int nodelay(MemorySegment x0, boolean x1) {
        var mh$ = nodelay$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle noecho$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$0,"noecho");
    }
    /**
     * {@snippet :
     * int noecho();
     * }
     */
    public static int noecho() {
        var mh$ = noecho$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nonl$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$1,"nonl");
    }
    /**
     * {@snippet :
     * int nonl();
     * }
     */
    public static int nonl() {
        var mh$ = nonl$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle noqiflush$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$2,"noqiflush");
    }
    /**
     * {@snippet :
     * void noqiflush();
     * }
     */
    public static void noqiflush() {
        var mh$ = noqiflush$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle noraw$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$3,"noraw");
    }
    /**
     * {@snippet :
     * int noraw();
     * }
     */
    public static int noraw() {
        var mh$ = noraw$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle notimeout$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$4,"notimeout");
    }
    /**
     * {@snippet :
     * int notimeout(WINDOW*, _Bool);
     * }
     */
    public static int notimeout(MemorySegment x0, boolean x1) {
        var mh$ = notimeout$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle overlay$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$5,"overlay");
    }
    /**
     * {@snippet :
     * int overlay(const WINDOW*, WINDOW*);
     * }
     */
    public static int overlay(MemorySegment x0, MemorySegment x1) {
        var mh$ = overlay$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle overwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$0,"overwrite");
    }
    /**
     * {@snippet :
     * int overwrite(const WINDOW*, WINDOW*);
     * }
     */
    public static int overwrite(MemorySegment x0, MemorySegment x1) {
        var mh$ = overwrite$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pair_content$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$2,"pair_content");
    }
    /**
     * {@snippet :
     * int pair_content(short, short*, short*);
     * }
     */
    public static int pair_content(short x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = pair_content$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PAIR_NUMBER$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$3,"PAIR_NUMBER");
    }
    /**
     * {@snippet :
     * int PAIR_NUMBER(int);
     * }
     */
    public static int PAIR_NUMBER(int x0) {
        var mh$ = PAIR_NUMBER$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pechochar$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$4,"pechochar");
    }
    /**
     * {@snippet :
     * int pechochar(WINDOW*, const chtype);
     * }
     */
    public static int pechochar(MemorySegment x0, int x1) {
        var mh$ = pechochar$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pnoutrefresh$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$6,"pnoutrefresh");
    }
    /**
     * {@snippet :
     * int pnoutrefresh(WINDOW*, int, int, int, int, int, int);
     * }
     */
    public static int pnoutrefresh(MemorySegment x0, int x1, int x2, int x3, int x4, int x5, int x6) {
        var mh$ = pnoutrefresh$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle prefresh$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$0,"prefresh");
    }
    /**
     * {@snippet :
     * int prefresh(WINDOW*, int, int, int, int, int, int);
     * }
     */
    public static int prefresh(MemorySegment x0, int x1, int x2, int x3, int x4, int x5, int x6) {
        var mh$ = prefresh$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle printw$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$1,"printw");
    }
    /**
     * {@snippet :
     * int printw(char*,...);
     * }
     */
    public static int printw(MemorySegment x0, Object... x1) {
        var mh$ = printw$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putwin$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$2,"putwin");
    }
    /**
     * {@snippet :
     * int putwin(WINDOW*, FILE*);
     * }
     */
    public static int putwin(MemorySegment x0, MemorySegment x1) {
        var mh$ = putwin$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle qiflush$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$3,"qiflush");
    }
    /**
     * {@snippet :
     * void qiflush();
     * }
     */
    public static void qiflush() {
        var mh$ = qiflush$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle raw$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$4,"raw");
    }
    /**
     * {@snippet :
     * int raw();
     * }
     */
    public static int raw() {
        var mh$ = raw$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle redrawwin$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$5,"redrawwin");
    }
    /**
     * {@snippet :
     * int redrawwin(WINDOW*);
     * }
     */
    public static int redrawwin(MemorySegment x0) {
        var mh$ = redrawwin$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle refresh$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$0,"refresh");
    }
    /**
     * {@snippet :
     * int refresh();
     * }
     */
    public static int refresh() {
        var mh$ = refresh$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle resetty$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$1,"resetty");
    }
    /**
     * {@snippet :
     * int resetty();
     * }
     */
    public static int resetty() {
        var mh$ = resetty$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle reset_prog_mode$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$2,"reset_prog_mode");
    }
    /**
     * {@snippet :
     * int reset_prog_mode();
     * }
     */
    public static int reset_prog_mode() {
        var mh$ = reset_prog_mode$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle reset_shell_mode$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$3,"reset_shell_mode");
    }
    /**
     * {@snippet :
     * int reset_shell_mode();
     * }
     */
    public static int reset_shell_mode() {
        var mh$ = reset_shell_mode$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ripoffline$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$0,"ripoffline");
    }
    /**
     * {@snippet :
     * int ripoffline(int, int (*)(WINDOW*,int));
     * }
     */
    public static int ripoffline(int x0, MemorySegment x1) {
        var mh$ = ripoffline$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle savetty$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$1,"savetty");
    }
    /**
     * {@snippet :
     * int savetty();
     * }
     */
    public static int savetty() {
        var mh$ = savetty$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scanw$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$2,"scanw");
    }
    /**
     * {@snippet :
     * int scanw(char*,...);
     * }
     */
    public static int scanw(MemorySegment x0, Object... x1) {
        var mh$ = scanw$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scr_dump$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$3,"scr_dump");
    }
    /**
     * {@snippet :
     * int scr_dump(char*);
     * }
     */
    public static int scr_dump(MemorySegment x0) {
        var mh$ = scr_dump$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scr_init$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$4,"scr_init");
    }
    /**
     * {@snippet :
     * int scr_init(char*);
     * }
     */
    public static int scr_init(MemorySegment x0) {
        var mh$ = scr_init$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scrl$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$5,"scrl");
    }
    /**
     * {@snippet :
     * int scrl(int);
     * }
     */
    public static int scrl(int x0) {
        var mh$ = scrl$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scroll$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$0,"scroll");
    }
    /**
     * {@snippet :
     * int scroll(WINDOW*);
     * }
     */
    public static int scroll(MemorySegment x0) {
        var mh$ = scroll$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scrollok$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$1,"scrollok");
    }
    /**
     * {@snippet :
     * int scrollok(WINDOW*, _Bool);
     * }
     */
    public static int scrollok(MemorySegment x0, boolean x1) {
        var mh$ = scrollok$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scr_restore$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$2,"scr_restore");
    }
    /**
     * {@snippet :
     * int scr_restore(char*);
     * }
     */
    public static int scr_restore(MemorySegment x0) {
        var mh$ = scr_restore$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scr_set$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$3,"scr_set");
    }
    /**
     * {@snippet :
     * int scr_set(char*);
     * }
     */
    public static int scr_set(MemorySegment x0) {
        var mh$ = scr_set$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setscrreg$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$4,"setscrreg");
    }
    /**
     * {@snippet :
     * int setscrreg(int, int);
     * }
     */
    public static int setscrreg(int x0, int x1) {
        var mh$ = setscrreg$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle set_term$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$5,"set_term");
    }
    /**
     * {@snippet :
     * SCREEN* set_term(SCREEN*);
     * }
     */
    public static MemorySegment set_term(MemorySegment x0) {
        var mh$ = set_term$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle slk_attroff$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$0,"slk_attroff");
    }
    /**
     * {@snippet :
     * int slk_attroff(const chtype);
     * }
     */
    public static int slk_attroff(int x0) {
        var mh$ = slk_attroff$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle slk_attr_off$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$1,"slk_attr_off");
    }
    /**
     * {@snippet :
     * int slk_attr_off(const attr_t, void*);
     * }
     */
    public static int slk_attr_off(int x0, MemorySegment x1) {
        var mh$ = slk_attr_off$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle slk_attron$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$2,"slk_attron");
    }
    /**
     * {@snippet :
     * int slk_attron(const chtype);
     * }
     */
    public static int slk_attron(int x0) {
        var mh$ = slk_attron$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle slk_attr_on$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$3,"slk_attr_on");
    }
    /**
     * {@snippet :
     * int slk_attr_on(attr_t, void*);
     * }
     */
    public static int slk_attr_on(int x0, MemorySegment x1) {
        var mh$ = slk_attr_on$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle slk_attrset$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$4,"slk_attrset");
    }
    /**
     * {@snippet :
     * int slk_attrset(const chtype);
     * }
     */
    public static int slk_attrset(int x0) {
        var mh$ = slk_attrset$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle slk_attr$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$5,"slk_attr");
    }
    /**
     * {@snippet :
     * attr_t slk_attr();
     * }
     */
    public static int slk_attr() {
        var mh$ = slk_attr$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle slk_attr_set$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$0,"slk_attr_set");
    }
    /**
     * {@snippet :
     * int slk_attr_set(const attr_t, short, void*);
     * }
     */
    public static int slk_attr_set(int x0, short x1, MemorySegment x2) {
        var mh$ = slk_attr_set$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle slk_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$1,"slk_clear");
    }
    /**
     * {@snippet :
     * int slk_clear();
     * }
     */
    public static int slk_clear() {
        var mh$ = slk_clear$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle slk_color$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$3,"slk_color");
    }
    /**
     * {@snippet :
     * int slk_color(short);
     * }
     */
    public static int slk_color(short x0) {
        var mh$ = slk_color$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle slk_init$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$4,"slk_init");
    }
    /**
     * {@snippet :
     * int slk_init(int);
     * }
     */
    public static int slk_init(int x0) {
        var mh$ = slk_init$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle slk_label$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$5,"slk_label");
    }
    /**
     * {@snippet :
     * char* slk_label(int);
     * }
     */
    public static MemorySegment slk_label(int x0) {
        var mh$ = slk_label$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle slk_noutrefresh$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$0,"slk_noutrefresh");
    }
    /**
     * {@snippet :
     * int slk_noutrefresh();
     * }
     */
    public static int slk_noutrefresh() {
        var mh$ = slk_noutrefresh$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle slk_refresh$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$1,"slk_refresh");
    }
    /**
     * {@snippet :
     * int slk_refresh();
     * }
     */
    public static int slk_refresh() {
        var mh$ = slk_refresh$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle slk_restore$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$2,"slk_restore");
    }
    /**
     * {@snippet :
     * int slk_restore();
     * }
     */
    public static int slk_restore() {
        var mh$ = slk_restore$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle slk_set$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$4,"slk_set");
    }
    /**
     * {@snippet :
     * int slk_set(int, char*, int);
     * }
     */
    public static int slk_set(int x0, MemorySegment x1, int x2) {
        var mh$ = slk_set$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle slk_touch$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$5,"slk_touch");
    }
    /**
     * {@snippet :
     * int slk_touch();
     * }
     */
    public static int slk_touch() {
        var mh$ = slk_touch$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle standout$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$0,"standout");
    }
    /**
     * {@snippet :
     * int standout();
     * }
     */
    public static int standout() {
        var mh$ = standout$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle standend$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$1,"standend");
    }
    /**
     * {@snippet :
     * int standend();
     * }
     */
    public static int standend() {
        var mh$ = standend$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle start_color$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$2,"start_color");
    }
    /**
     * {@snippet :
     * int start_color();
     * }
     */
    public static int start_color() {
        var mh$ = start_color$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle subpad$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$3,"subpad");
    }
    /**
     * {@snippet :
     * WINDOW* subpad(WINDOW*, int, int, int, int);
     * }
     */
    public static MemorySegment subpad(MemorySegment x0, int x1, int x2, int x3, int x4) {
        var mh$ = subpad$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle subwin$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$4,"subwin");
    }
    /**
     * {@snippet :
     * WINDOW* subwin(WINDOW*, int, int, int, int);
     * }
     */
    public static MemorySegment subwin(MemorySegment x0, int x1, int x2, int x3, int x4) {
        var mh$ = subwin$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle syncok$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$5,"syncok");
    }
    /**
     * {@snippet :
     * int syncok(WINDOW*, _Bool);
     * }
     */
    public static int syncok(MemorySegment x0, boolean x1) {
        var mh$ = syncok$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle termattrs$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$0,"termattrs");
    }
    /**
     * {@snippet :
     * chtype termattrs();
     * }
     */
    public static int termattrs() {
        var mh$ = termattrs$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle termname$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$1,"termname");
    }
    /**
     * {@snippet :
     * char* termname();
     * }
     */
    public static MemorySegment termname() {
        var mh$ = termname$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timeout$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$2,"timeout");
    }
    /**
     * {@snippet :
     * void timeout(int);
     * }
     */
    public static void timeout(int x0) {
        var mh$ = timeout$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle touchline$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$3,"touchline");
    }
    /**
     * {@snippet :
     * int touchline(WINDOW*, int, int);
     * }
     */
    public static int touchline(MemorySegment x0, int x1, int x2) {
        var mh$ = touchline$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle touchwin$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$4,"touchwin");
    }
    /**
     * {@snippet :
     * int touchwin(WINDOW*);
     * }
     */
    public static int touchwin(MemorySegment x0) {
        var mh$ = touchwin$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle typeahead$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$5,"typeahead");
    }
    /**
     * {@snippet :
     * int typeahead(int);
     * }
     */
    public static int typeahead(int x0) {
        var mh$ = typeahead$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ungetch$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$0,"ungetch");
    }
    /**
     * {@snippet :
     * int ungetch(int);
     * }
     */
    public static int ungetch(int x0) {
        var mh$ = ungetch$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle untouchwin$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$1,"untouchwin");
    }
    /**
     * {@snippet :
     * int untouchwin(WINDOW*);
     * }
     */
    public static int untouchwin(MemorySegment x0) {
        var mh$ = untouchwin$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle use_env$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$3,"use_env");
    }
    /**
     * {@snippet :
     * void use_env(_Bool);
     * }
     */
    public static void use_env(boolean x0) {
        var mh$ = use_env$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle use_tioctl$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$4,"use_tioctl");
    }
    /**
     * {@snippet :
     * void use_tioctl(_Bool);
     * }
     */
    public static void use_tioctl(boolean x0) {
        var mh$ = use_tioctl$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vidattr$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$5,"vidattr");
    }
    /**
     * {@snippet :
     * int vidattr(chtype);
     * }
     */
    public static int vidattr(int x0) {
        var mh$ = vidattr$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vidputs$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$0,"vidputs");
    }
    /**
     * {@snippet :
     * int vidputs(chtype, NCURSES_OUTC);
     * }
     */
    public static int vidputs(int x0, MemorySegment x1) {
        var mh$ = vidputs$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vline$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$1,"vline");
    }
    /**
     * {@snippet :
     * int vline(chtype, int);
     * }
     */
    public static int vline(int x0, int x1) {
        var mh$ = vline$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vwprintw$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$2,"vwprintw");
    }
    /**
     * {@snippet :
     * int vwprintw(WINDOW*, char*, va_list);
     * }
     */
    public static int vwprintw(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = vwprintw$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vw_printw$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$3,"vw_printw");
    }
    /**
     * {@snippet :
     * int vw_printw(WINDOW*, char*, va_list);
     * }
     */
    public static int vw_printw(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = vw_printw$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vwscanw$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$4,"vwscanw");
    }
    /**
     * {@snippet :
     * int vwscanw(WINDOW*, char*, va_list);
     * }
     */
    public static int vwscanw(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = vwscanw$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vw_scanw$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$5,"vw_scanw");
    }
    /**
     * {@snippet :
     * int vw_scanw(WINDOW*, char*, va_list);
     * }
     */
    public static int vw_scanw(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = vw_scanw$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waddch$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$0,"waddch");
    }
    /**
     * {@snippet :
     * int waddch(WINDOW*, const chtype);
     * }
     */
    public static int waddch(MemorySegment x0, int x1) {
        var mh$ = waddch$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waddchnstr$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$1,"waddchnstr");
    }
    /**
     * {@snippet :
     * int waddchnstr(WINDOW*, const chtype*, int);
     * }
     */
    public static int waddchnstr(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = waddchnstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waddchstr$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$2,"waddchstr");
    }
    /**
     * {@snippet :
     * int waddchstr(WINDOW*, const chtype*);
     * }
     */
    public static int waddchstr(MemorySegment x0, MemorySegment x1) {
        var mh$ = waddchstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waddnstr$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$3,"waddnstr");
    }
    /**
     * {@snippet :
     * int waddnstr(WINDOW*, char*, int);
     * }
     */
    public static int waddnstr(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = waddnstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waddstr$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$4,"waddstr");
    }
    /**
     * {@snippet :
     * int waddstr(WINDOW*, char*);
     * }
     */
    public static int waddstr(MemorySegment x0, MemorySegment x1) {
        var mh$ = waddstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wattron$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$5,"wattron");
    }
    /**
     * {@snippet :
     * int wattron(WINDOW*, int);
     * }
     */
    public static int wattron(MemorySegment x0, int x1) {
        var mh$ = wattron$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wattroff$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$0,"wattroff");
    }
    /**
     * {@snippet :
     * int wattroff(WINDOW*, int);
     * }
     */
    public static int wattroff(MemorySegment x0, int x1) {
        var mh$ = wattroff$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wattrset$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$1,"wattrset");
    }
    /**
     * {@snippet :
     * int wattrset(WINDOW*, int);
     * }
     */
    public static int wattrset(MemorySegment x0, int x1) {
        var mh$ = wattrset$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wattr_get$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$3,"wattr_get");
    }
    /**
     * {@snippet :
     * int wattr_get(WINDOW*, attr_t*, short*, void*);
     * }
     */
    public static int wattr_get(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = wattr_get$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wattr_on$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$5,"wattr_on");
    }
    /**
     * {@snippet :
     * int wattr_on(WINDOW*, attr_t, void*);
     * }
     */
    public static int wattr_on(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = wattr_on$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wattr_off$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$0,"wattr_off");
    }
    /**
     * {@snippet :
     * int wattr_off(WINDOW*, attr_t, void*);
     * }
     */
    public static int wattr_off(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = wattr_off$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wattr_set$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$2,"wattr_set");
    }
    /**
     * {@snippet :
     * int wattr_set(WINDOW*, attr_t, short, void*);
     * }
     */
    public static int wattr_set(MemorySegment x0, int x1, short x2, MemorySegment x3) {
        var mh$ = wattr_set$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wbkgd$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$3,"wbkgd");
    }
    /**
     * {@snippet :
     * int wbkgd(WINDOW*, chtype);
     * }
     */
    public static int wbkgd(MemorySegment x0, int x1) {
        var mh$ = wbkgd$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wbkgdset$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$5,"wbkgdset");
    }
    /**
     * {@snippet :
     * void wbkgdset(WINDOW*, chtype);
     * }
     */
    public static void wbkgdset(MemorySegment x0, int x1) {
        var mh$ = wbkgdset$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wborder$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$1,"wborder");
    }
    /**
     * {@snippet :
     * int wborder(WINDOW*, chtype, chtype, chtype, chtype, chtype, chtype, chtype, chtype);
     * }
     */
    public static int wborder(MemorySegment x0, int x1, int x2, int x3, int x4, int x5, int x6, int x7, int x8) {
        var mh$ = wborder$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wchgat$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$3,"wchgat");
    }
    /**
     * {@snippet :
     * int wchgat(WINDOW*, int, attr_t, short, void*);
     * }
     */
    public static int wchgat(MemorySegment x0, int x1, int x2, short x3, MemorySegment x4) {
        var mh$ = wchgat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wclear$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$4,"wclear");
    }
    /**
     * {@snippet :
     * int wclear(WINDOW*);
     * }
     */
    public static int wclear(MemorySegment x0) {
        var mh$ = wclear$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wclrtobot$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$5,"wclrtobot");
    }
    /**
     * {@snippet :
     * int wclrtobot(WINDOW*);
     * }
     */
    public static int wclrtobot(MemorySegment x0) {
        var mh$ = wclrtobot$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wclrtoeol$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$0,"wclrtoeol");
    }
    /**
     * {@snippet :
     * int wclrtoeol(WINDOW*);
     * }
     */
    public static int wclrtoeol(MemorySegment x0) {
        var mh$ = wclrtoeol$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcolor_set$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$2,"wcolor_set");
    }
    /**
     * {@snippet :
     * int wcolor_set(WINDOW*, short, void*);
     * }
     */
    public static int wcolor_set(MemorySegment x0, short x1, MemorySegment x2) {
        var mh$ = wcolor_set$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcursyncup$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$3,"wcursyncup");
    }
    /**
     * {@snippet :
     * void wcursyncup(WINDOW*);
     * }
     */
    public static void wcursyncup(MemorySegment x0) {
        var mh$ = wcursyncup$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wdelch$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$4,"wdelch");
    }
    /**
     * {@snippet :
     * int wdelch(WINDOW*);
     * }
     */
    public static int wdelch(MemorySegment x0) {
        var mh$ = wdelch$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wdeleteln$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$5,"wdeleteln");
    }
    /**
     * {@snippet :
     * int wdeleteln(WINDOW*);
     * }
     */
    public static int wdeleteln(MemorySegment x0) {
        var mh$ = wdeleteln$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wechochar$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$0,"wechochar");
    }
    /**
     * {@snippet :
     * int wechochar(WINDOW*, const chtype);
     * }
     */
    public static int wechochar(MemorySegment x0, int x1) {
        var mh$ = wechochar$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle werase$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$1,"werase");
    }
    /**
     * {@snippet :
     * int werase(WINDOW*);
     * }
     */
    public static int werase(MemorySegment x0) {
        var mh$ = werase$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wgetch$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$2,"wgetch");
    }
    /**
     * {@snippet :
     * int wgetch(WINDOW*);
     * }
     */
    public static int wgetch(MemorySegment x0) {
        var mh$ = wgetch$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wgetnstr$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$3,"wgetnstr");
    }
    /**
     * {@snippet :
     * int wgetnstr(WINDOW*, char*, int);
     * }
     */
    public static int wgetnstr(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = wgetnstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wgetstr$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$4,"wgetstr");
    }
    /**
     * {@snippet :
     * int wgetstr(WINDOW*, char*);
     * }
     */
    public static int wgetstr(MemorySegment x0, MemorySegment x1) {
        var mh$ = wgetstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle whline$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$5,"whline");
    }
    /**
     * {@snippet :
     * int whline(WINDOW*, chtype, int);
     * }
     */
    public static int whline(MemorySegment x0, int x1, int x2) {
        var mh$ = whline$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle winch$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$0,"winch");
    }
    /**
     * {@snippet :
     * chtype winch(WINDOW*);
     * }
     */
    public static int winch(MemorySegment x0) {
        var mh$ = winch$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle winchnstr$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$1,"winchnstr");
    }
    /**
     * {@snippet :
     * int winchnstr(WINDOW*, chtype*, int);
     * }
     */
    public static int winchnstr(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = winchnstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle winchstr$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$2,"winchstr");
    }
    /**
     * {@snippet :
     * int winchstr(WINDOW*, chtype*);
     * }
     */
    public static int winchstr(MemorySegment x0, MemorySegment x1) {
        var mh$ = winchstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle winnstr$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$3,"winnstr");
    }
    /**
     * {@snippet :
     * int winnstr(WINDOW*, char*, int);
     * }
     */
    public static int winnstr(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = winnstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle winsch$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$4,"winsch");
    }
    /**
     * {@snippet :
     * int winsch(WINDOW*, chtype);
     * }
     */
    public static int winsch(MemorySegment x0, int x1) {
        var mh$ = winsch$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle winsdelln$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$5,"winsdelln");
    }
    /**
     * {@snippet :
     * int winsdelln(WINDOW*, int);
     * }
     */
    public static int winsdelln(MemorySegment x0, int x1) {
        var mh$ = winsdelln$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle winsertln$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$0,"winsertln");
    }
    /**
     * {@snippet :
     * int winsertln(WINDOW*);
     * }
     */
    public static int winsertln(MemorySegment x0) {
        var mh$ = winsertln$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle winsnstr$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$1,"winsnstr");
    }
    /**
     * {@snippet :
     * int winsnstr(WINDOW*, char*, int);
     * }
     */
    public static int winsnstr(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = winsnstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle winsstr$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$2,"winsstr");
    }
    /**
     * {@snippet :
     * int winsstr(WINDOW*, char*);
     * }
     */
    public static int winsstr(MemorySegment x0, MemorySegment x1) {
        var mh$ = winsstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle winstr$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$3,"winstr");
    }
    /**
     * {@snippet :
     * int winstr(WINDOW*, char*);
     * }
     */
    public static int winstr(MemorySegment x0, MemorySegment x1) {
        var mh$ = winstr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wmove$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$4,"wmove");
    }
    /**
     * {@snippet :
     * int wmove(WINDOW*, int, int);
     * }
     */
    public static int wmove(MemorySegment x0, int x1, int x2) {
        var mh$ = wmove$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wnoutrefresh$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$5,"wnoutrefresh");
    }
    /**
     * {@snippet :
     * int wnoutrefresh(WINDOW*);
     * }
     */
    public static int wnoutrefresh(MemorySegment x0) {
        var mh$ = wnoutrefresh$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wprintw$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$0,"wprintw");
    }
    /**
     * {@snippet :
     * int wprintw(WINDOW*, char*,...);
     * }
     */
    public static int wprintw(MemorySegment x0, MemorySegment x1, Object... x2) {
        var mh$ = wprintw$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wredrawln$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$1,"wredrawln");
    }
    /**
     * {@snippet :
     * int wredrawln(WINDOW*, int, int);
     * }
     */
    public static int wredrawln(MemorySegment x0, int x1, int x2) {
        var mh$ = wredrawln$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wrefresh$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$2,"wrefresh");
    }
    /**
     * {@snippet :
     * int wrefresh(WINDOW*);
     * }
     */
    public static int wrefresh(MemorySegment x0) {
        var mh$ = wrefresh$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wscanw$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$3,"wscanw");
    }
    /**
     * {@snippet :
     * int wscanw(WINDOW*, char*,...);
     * }
     */
    public static int wscanw(MemorySegment x0, MemorySegment x1, Object... x2) {
        var mh$ = wscanw$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wscrl$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$4,"wscrl");
    }
    /**
     * {@snippet :
     * int wscrl(WINDOW*, int);
     * }
     */
    public static int wscrl(MemorySegment x0, int x1) {
        var mh$ = wscrl$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wsetscrreg$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$5,"wsetscrreg");
    }
    /**
     * {@snippet :
     * int wsetscrreg(WINDOW*, int, int);
     * }
     */
    public static int wsetscrreg(MemorySegment x0, int x1, int x2) {
        var mh$ = wsetscrreg$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wstandout$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$0,"wstandout");
    }
    /**
     * {@snippet :
     * int wstandout(WINDOW*);
     * }
     */
    public static int wstandout(MemorySegment x0) {
        var mh$ = wstandout$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wstandend$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$1,"wstandend");
    }
    /**
     * {@snippet :
     * int wstandend(WINDOW*);
     * }
     */
    public static int wstandend(MemorySegment x0) {
        var mh$ = wstandend$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wsyncdown$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$2,"wsyncdown");
    }
    /**
     * {@snippet :
     * void wsyncdown(WINDOW*);
     * }
     */
    public static void wsyncdown(MemorySegment x0) {
        var mh$ = wsyncdown$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wsyncup$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$3,"wsyncup");
    }
    /**
     * {@snippet :
     * void wsyncup(WINDOW*);
     * }
     */
    public static void wsyncup(MemorySegment x0) {
        var mh$ = wsyncup$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wtimeout$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$4,"wtimeout");
    }
    /**
     * {@snippet :
     * void wtimeout(WINDOW*, int);
     * }
     */
    public static void wtimeout(MemorySegment x0, int x1) {
        var mh$ = wtimeout$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wtouchln$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$5,"wtouchln");
    }
    /**
     * {@snippet :
     * int wtouchln(WINDOW*, int, int, int);
     * }
     */
    public static int wtouchln(MemorySegment x0, int x1, int x2, int x3) {
        var mh$ = wtouchln$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wvline$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$0,"wvline");
    }
    /**
     * {@snippet :
     * int wvline(WINDOW*, chtype, int);
     * }
     */
    public static int wvline(MemorySegment x0, int x1, int x2) {
        var mh$ = wvline$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tigetflag$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$1,"tigetflag");
    }
    /**
     * {@snippet :
     * int tigetflag(char*);
     * }
     */
    public static int tigetflag(MemorySegment x0) {
        var mh$ = tigetflag$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tigetnum$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$2,"tigetnum");
    }
    /**
     * {@snippet :
     * int tigetnum(char*);
     * }
     */
    public static int tigetnum(MemorySegment x0) {
        var mh$ = tigetnum$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tigetstr$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$3,"tigetstr");
    }
    /**
     * {@snippet :
     * char* tigetstr(char*);
     * }
     */
    public static MemorySegment tigetstr(MemorySegment x0) {
        var mh$ = tigetstr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putp$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$4,"putp");
    }
    /**
     * {@snippet :
     * int putp(char*);
     * }
     */
    public static int putp(MemorySegment x0) {
        var mh$ = putp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tparm$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$5,"tparm");
    }
    /**
     * {@snippet :
     * char* tparm(char*,...);
     * }
     */
    public static MemorySegment tparm(MemorySegment x0, Object... x1) {
        var mh$ = tparm$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tiparm$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$0,"tiparm");
    }
    /**
     * {@snippet :
     * char* tiparm(char*,...);
     * }
     */
    public static MemorySegment tiparm(MemorySegment x0, Object... x1) {
        var mh$ = tiparm$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tiparm_s$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$2,"tiparm_s");
    }
    /**
     * {@snippet :
     * char* tiparm_s(int, int, char*,...);
     * }
     */
    public static MemorySegment tiparm_s(int x0, int x1, MemorySegment x2, Object... x3) {
        var mh$ = tiparm_s$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tiscan_s$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$3,"tiscan_s");
    }
    /**
     * {@snippet :
     * int tiscan_s(int*, int*, char*);
     * }
     */
    public static int tiscan_s(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = tiscan_s$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getattrs$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$4,"getattrs");
    }
    /**
     * {@snippet :
     * int getattrs(const WINDOW*);
     * }
     */
    public static int getattrs(MemorySegment x0) {
        var mh$ = getattrs$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getcurx$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$5,"getcurx");
    }
    /**
     * {@snippet :
     * int getcurx(const WINDOW*);
     * }
     */
    public static int getcurx(MemorySegment x0) {
        var mh$ = getcurx$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getcury$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$0,"getcury");
    }
    /**
     * {@snippet :
     * int getcury(const WINDOW*);
     * }
     */
    public static int getcury(MemorySegment x0) {
        var mh$ = getcury$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getbegx$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$1,"getbegx");
    }
    /**
     * {@snippet :
     * int getbegx(const WINDOW*);
     * }
     */
    public static int getbegx(MemorySegment x0) {
        var mh$ = getbegx$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getbegy$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$2,"getbegy");
    }
    /**
     * {@snippet :
     * int getbegy(const WINDOW*);
     * }
     */
    public static int getbegy(MemorySegment x0) {
        var mh$ = getbegy$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getmaxx$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$3,"getmaxx");
    }
    /**
     * {@snippet :
     * int getmaxx(const WINDOW*);
     * }
     */
    public static int getmaxx(MemorySegment x0) {
        var mh$ = getmaxx$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getmaxy$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$4,"getmaxy");
    }
    /**
     * {@snippet :
     * int getmaxy(const WINDOW*);
     * }
     */
    public static int getmaxy(MemorySegment x0) {
        var mh$ = getmaxy$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getparx$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$5,"getparx");
    }
    /**
     * {@snippet :
     * int getparx(const WINDOW*);
     * }
     */
    public static int getparx(MemorySegment x0) {
        var mh$ = getparx$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpary$MH() {
        return RuntimeHelper.requireNonNull(constants$81.const$0,"getpary");
    }
    /**
     * {@snippet :
     * int getpary(const WINDOW*);
     * }
     */
    public static int getpary(MemorySegment x0) {
        var mh$ = getpary$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle alloc_pair$MH() {
        return RuntimeHelper.requireNonNull(constants$81.const$4,"alloc_pair");
    }
    /**
     * {@snippet :
     * int alloc_pair(int, int);
     * }
     */
    public static int alloc_pair(int x0, int x1) {
        var mh$ = alloc_pair$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle assume_default_colors$MH() {
        return RuntimeHelper.requireNonNull(constants$81.const$5,"assume_default_colors");
    }
    /**
     * {@snippet :
     * int assume_default_colors(int, int);
     * }
     */
    public static int assume_default_colors(int x0, int x1) {
        var mh$ = assume_default_colors$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curses_version$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$0,"curses_version");
    }
    /**
     * {@snippet :
     * char* curses_version();
     * }
     */
    public static MemorySegment curses_version() {
        var mh$ = curses_version$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle define_key$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$1,"define_key");
    }
    /**
     * {@snippet :
     * int define_key(char*, int);
     * }
     */
    public static int define_key(MemorySegment x0, int x1) {
        var mh$ = define_key$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle extended_color_content$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$3,"extended_color_content");
    }
    /**
     * {@snippet :
     * int extended_color_content(int, int*, int*, int*);
     * }
     */
    public static int extended_color_content(int x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = extended_color_content$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle extended_pair_content$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$4,"extended_pair_content");
    }
    /**
     * {@snippet :
     * int extended_pair_content(int, int*, int*);
     * }
     */
    public static int extended_pair_content(int x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = extended_pair_content$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle extended_slk_color$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$5,"extended_slk_color");
    }
    /**
     * {@snippet :
     * int extended_slk_color(int);
     * }
     */
    public static int extended_slk_color(int x0) {
        var mh$ = extended_slk_color$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle find_pair$MH() {
        return RuntimeHelper.requireNonNull(constants$83.const$0,"find_pair");
    }
    /**
     * {@snippet :
     * int find_pair(int, int);
     * }
     */
    public static int find_pair(int x0, int x1) {
        var mh$ = find_pair$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle free_pair$MH() {
        return RuntimeHelper.requireNonNull(constants$83.const$1,"free_pair");
    }
    /**
     * {@snippet :
     * int free_pair(int);
     * }
     */
    public static int free_pair(int x0) {
        var mh$ = free_pair$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle get_escdelay$MH() {
        return RuntimeHelper.requireNonNull(constants$83.const$2,"get_escdelay");
    }
    /**
     * {@snippet :
     * int get_escdelay();
     * }
     */
    public static int get_escdelay() {
        var mh$ = get_escdelay$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle init_extended_color$MH() {
        return RuntimeHelper.requireNonNull(constants$83.const$3,"init_extended_color");
    }
    /**
     * {@snippet :
     * int init_extended_color(int, int, int, int);
     * }
     */
    public static int init_extended_color(int x0, int x1, int x2, int x3) {
        var mh$ = init_extended_color$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle init_extended_pair$MH() {
        return RuntimeHelper.requireNonNull(constants$83.const$4,"init_extended_pair");
    }
    /**
     * {@snippet :
     * int init_extended_pair(int, int, int);
     * }
     */
    public static int init_extended_pair(int x0, int x1, int x2) {
        var mh$ = init_extended_pair$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle is_cbreak$MH() {
        return RuntimeHelper.requireNonNull(constants$83.const$5,"is_cbreak");
    }
    /**
     * {@snippet :
     * int is_cbreak();
     * }
     */
    public static int is_cbreak() {
        var mh$ = is_cbreak$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle is_echo$MH() {
        return RuntimeHelper.requireNonNull(constants$84.const$0,"is_echo");
    }
    /**
     * {@snippet :
     * int is_echo();
     * }
     */
    public static int is_echo() {
        var mh$ = is_echo$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle is_nl$MH() {
        return RuntimeHelper.requireNonNull(constants$84.const$1,"is_nl");
    }
    /**
     * {@snippet :
     * int is_nl();
     * }
     */
    public static int is_nl() {
        var mh$ = is_nl$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle is_raw$MH() {
        return RuntimeHelper.requireNonNull(constants$84.const$2,"is_raw");
    }
    /**
     * {@snippet :
     * int is_raw();
     * }
     */
    public static int is_raw() {
        var mh$ = is_raw$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle is_term_resized$MH() {
        return RuntimeHelper.requireNonNull(constants$84.const$4,"is_term_resized");
    }
    /**
     * {@snippet :
     * _Bool is_term_resized(int, int);
     * }
     */
    public static boolean is_term_resized(int x0, int x1) {
        var mh$ = is_term_resized$MH();
        try {
            return (boolean)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle key_defined$MH() {
        return RuntimeHelper.requireNonNull(constants$84.const$5,"key_defined");
    }
    /**
     * {@snippet :
     * int key_defined(char*);
     * }
     */
    public static int key_defined(MemorySegment x0) {
        var mh$ = key_defined$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle keybound$MH() {
        return RuntimeHelper.requireNonNull(constants$85.const$0,"keybound");
    }
    /**
     * {@snippet :
     * char* keybound(int, int);
     * }
     */
    public static MemorySegment keybound(int x0, int x1) {
        var mh$ = keybound$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle keyok$MH() {
        return RuntimeHelper.requireNonNull(constants$85.const$2,"keyok");
    }
    /**
     * {@snippet :
     * int keyok(int, _Bool);
     * }
     */
    public static int keyok(int x0, boolean x1) {
        var mh$ = keyok$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nofilter$MH() {
        return RuntimeHelper.requireNonNull(constants$85.const$3,"nofilter");
    }
    /**
     * {@snippet :
     * void nofilter();
     * }
     */
    public static void nofilter() {
        var mh$ = nofilter$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle reset_color_pairs$MH() {
        return RuntimeHelper.requireNonNull(constants$85.const$4,"reset_color_pairs");
    }
    /**
     * {@snippet :
     * void reset_color_pairs();
     * }
     */
    public static void reset_color_pairs() {
        var mh$ = reset_color_pairs$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle resize_term$MH() {
        return RuntimeHelper.requireNonNull(constants$85.const$5,"resize_term");
    }
    /**
     * {@snippet :
     * int resize_term(int, int);
     * }
     */
    public static int resize_term(int x0, int x1) {
        var mh$ = resize_term$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle resizeterm$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$0,"resizeterm");
    }
    /**
     * {@snippet :
     * int resizeterm(int, int);
     * }
     */
    public static int resizeterm(int x0, int x1) {
        var mh$ = resizeterm$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle set_escdelay$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$1,"set_escdelay");
    }
    /**
     * {@snippet :
     * int set_escdelay(int);
     * }
     */
    public static int set_escdelay(int x0) {
        var mh$ = set_escdelay$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle set_tabsize$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$2,"set_tabsize");
    }
    /**
     * {@snippet :
     * int set_tabsize(int);
     * }
     */
    public static int set_tabsize(int x0) {
        var mh$ = set_tabsize$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle use_default_colors$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$3,"use_default_colors");
    }
    /**
     * {@snippet :
     * int use_default_colors();
     * }
     */
    public static int use_default_colors() {
        var mh$ = use_default_colors$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle use_legacy_coding$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$4,"use_legacy_coding");
    }
    /**
     * {@snippet :
     * int use_legacy_coding(int);
     * }
     */
    public static int use_legacy_coding(int x0) {
        var mh$ = use_legacy_coding$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle use_screen$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$5,"use_screen");
    }
    /**
     * {@snippet :
     * int use_screen(SCREEN*, NCURSES_SCREEN_CB, void*);
     * }
     */
    public static int use_screen(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = use_screen$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle use_window$MH() {
        return RuntimeHelper.requireNonNull(constants$87.const$0,"use_window");
    }
    /**
     * {@snippet :
     * int use_window(WINDOW*, NCURSES_WINDOW_CB, void*);
     * }
     */
    public static int use_window(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = use_window$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wresize$MH() {
        return RuntimeHelper.requireNonNull(constants$87.const$1,"wresize");
    }
    /**
     * {@snippet :
     * int wresize(WINDOW*, int, int);
     * }
     */
    public static int wresize(MemorySegment x0, int x1, int x2) {
        var mh$ = wresize$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle use_extended_names$MH() {
        return RuntimeHelper.requireNonNull(constants$87.const$3,"use_extended_names");
    }
    /**
     * {@snippet :
     * int use_extended_names(_Bool);
     * }
     */
    public static int use_extended_names(boolean x0) {
        var mh$ = use_extended_names$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wgetparent$MH() {
        return RuntimeHelper.requireNonNull(constants$87.const$4,"wgetparent");
    }
    /**
     * {@snippet :
     * WINDOW* wgetparent(const WINDOW*);
     * }
     */
    public static MemorySegment wgetparent(MemorySegment x0) {
        var mh$ = wgetparent$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle is_cleared$MH() {
        return RuntimeHelper.requireNonNull(constants$87.const$5,"is_cleared");
    }
    /**
     * {@snippet :
     * _Bool is_cleared(const WINDOW*);
     * }
     */
    public static boolean is_cleared(MemorySegment x0) {
        var mh$ = is_cleared$MH();
        try {
            return (boolean)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle is_idcok$MH() {
        return RuntimeHelper.requireNonNull(constants$88.const$0,"is_idcok");
    }
    /**
     * {@snippet :
     * _Bool is_idcok(const WINDOW*);
     * }
     */
    public static boolean is_idcok(MemorySegment x0) {
        var mh$ = is_idcok$MH();
        try {
            return (boolean)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle is_idlok$MH() {
        return RuntimeHelper.requireNonNull(constants$88.const$1,"is_idlok");
    }
    /**
     * {@snippet :
     * _Bool is_idlok(const WINDOW*);
     * }
     */
    public static boolean is_idlok(MemorySegment x0) {
        var mh$ = is_idlok$MH();
        try {
            return (boolean)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle is_immedok$MH() {
        return RuntimeHelper.requireNonNull(constants$88.const$2,"is_immedok");
    }
    /**
     * {@snippet :
     * _Bool is_immedok(const WINDOW*);
     * }
     */
    public static boolean is_immedok(MemorySegment x0) {
        var mh$ = is_immedok$MH();
        try {
            return (boolean)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle is_keypad$MH() {
        return RuntimeHelper.requireNonNull(constants$88.const$3,"is_keypad");
    }
    /**
     * {@snippet :
     * _Bool is_keypad(const WINDOW*);
     * }
     */
    public static boolean is_keypad(MemorySegment x0) {
        var mh$ = is_keypad$MH();
        try {
            return (boolean)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle is_leaveok$MH() {
        return RuntimeHelper.requireNonNull(constants$88.const$4,"is_leaveok");
    }
    /**
     * {@snippet :
     * _Bool is_leaveok(const WINDOW*);
     * }
     */
    public static boolean is_leaveok(MemorySegment x0) {
        var mh$ = is_leaveok$MH();
        try {
            return (boolean)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle is_nodelay$MH() {
        return RuntimeHelper.requireNonNull(constants$88.const$5,"is_nodelay");
    }
    /**
     * {@snippet :
     * _Bool is_nodelay(const WINDOW*);
     * }
     */
    public static boolean is_nodelay(MemorySegment x0) {
        var mh$ = is_nodelay$MH();
        try {
            return (boolean)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle is_notimeout$MH() {
        return RuntimeHelper.requireNonNull(constants$89.const$0,"is_notimeout");
    }
    /**
     * {@snippet :
     * _Bool is_notimeout(const WINDOW*);
     * }
     */
    public static boolean is_notimeout(MemorySegment x0) {
        var mh$ = is_notimeout$MH();
        try {
            return (boolean)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle is_pad$MH() {
        return RuntimeHelper.requireNonNull(constants$89.const$1,"is_pad");
    }
    /**
     * {@snippet :
     * _Bool is_pad(const WINDOW*);
     * }
     */
    public static boolean is_pad(MemorySegment x0) {
        var mh$ = is_pad$MH();
        try {
            return (boolean)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle is_scrollok$MH() {
        return RuntimeHelper.requireNonNull(constants$89.const$2,"is_scrollok");
    }
    /**
     * {@snippet :
     * _Bool is_scrollok(const WINDOW*);
     * }
     */
    public static boolean is_scrollok(MemorySegment x0) {
        var mh$ = is_scrollok$MH();
        try {
            return (boolean)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle is_subwin$MH() {
        return RuntimeHelper.requireNonNull(constants$89.const$3,"is_subwin");
    }
    /**
     * {@snippet :
     * _Bool is_subwin(const WINDOW*);
     * }
     */
    public static boolean is_subwin(MemorySegment x0) {
        var mh$ = is_subwin$MH();
        try {
            return (boolean)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle is_syncok$MH() {
        return RuntimeHelper.requireNonNull(constants$89.const$4,"is_syncok");
    }
    /**
     * {@snippet :
     * _Bool is_syncok(const WINDOW*);
     * }
     */
    public static boolean is_syncok(MemorySegment x0) {
        var mh$ = is_syncok$MH();
        try {
            return (boolean)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wgetdelay$MH() {
        return RuntimeHelper.requireNonNull(constants$89.const$5,"wgetdelay");
    }
    /**
     * {@snippet :
     * int wgetdelay(const WINDOW*);
     * }
     */
    public static int wgetdelay(MemorySegment x0) {
        var mh$ = wgetdelay$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wgetscrreg$MH() {
        return RuntimeHelper.requireNonNull(constants$90.const$0,"wgetscrreg");
    }
    /**
     * {@snippet :
     * int wgetscrreg(const WINDOW*, int*, int*);
     * }
     */
    public static int wgetscrreg(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = wgetscrreg$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle new_prescr$MH() {
        return RuntimeHelper.requireNonNull(constants$90.const$2,"new_prescr");
    }
    /**
     * {@snippet :
     * SCREEN* new_prescr();
     * }
     */
    public static MemorySegment new_prescr() {
        var mh$ = new_prescr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle baudrate_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$90.const$3,"baudrate_sp");
    }
    /**
     * {@snippet :
     * int baudrate_sp(SCREEN*);
     * }
     */
    public static int baudrate_sp(MemorySegment x0) {
        var mh$ = baudrate_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle beep_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$90.const$4,"beep_sp");
    }
    /**
     * {@snippet :
     * int beep_sp(SCREEN*);
     * }
     */
    public static int beep_sp(MemorySegment x0) {
        var mh$ = beep_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle can_change_color_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$90.const$5,"can_change_color_sp");
    }
    /**
     * {@snippet :
     * _Bool can_change_color_sp(SCREEN*);
     * }
     */
    public static boolean can_change_color_sp(MemorySegment x0) {
        var mh$ = can_change_color_sp$MH();
        try {
            return (boolean)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cbreak_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$0,"cbreak_sp");
    }
    /**
     * {@snippet :
     * int cbreak_sp(SCREEN*);
     * }
     */
    public static int cbreak_sp(MemorySegment x0) {
        var mh$ = cbreak_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curs_set_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$1,"curs_set_sp");
    }
    /**
     * {@snippet :
     * int curs_set_sp(SCREEN*, int);
     * }
     */
    public static int curs_set_sp(MemorySegment x0, int x1) {
        var mh$ = curs_set_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle color_content_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$3,"color_content_sp");
    }
    /**
     * {@snippet :
     * int color_content_sp(SCREEN*, short, short*, short*, short*);
     * }
     */
    public static int color_content_sp(MemorySegment x0, short x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = color_content_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle def_prog_mode_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$4,"def_prog_mode_sp");
    }
    /**
     * {@snippet :
     * int def_prog_mode_sp(SCREEN*);
     * }
     */
    public static int def_prog_mode_sp(MemorySegment x0) {
        var mh$ = def_prog_mode_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle def_shell_mode_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$5,"def_shell_mode_sp");
    }
    /**
     * {@snippet :
     * int def_shell_mode_sp(SCREEN*);
     * }
     */
    public static int def_shell_mode_sp(MemorySegment x0) {
        var mh$ = def_shell_mode_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle delay_output_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$0,"delay_output_sp");
    }
    /**
     * {@snippet :
     * int delay_output_sp(SCREEN*, int);
     * }
     */
    public static int delay_output_sp(MemorySegment x0, int x1) {
        var mh$ = delay_output_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle doupdate_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$1,"doupdate_sp");
    }
    /**
     * {@snippet :
     * int doupdate_sp(SCREEN*);
     * }
     */
    public static int doupdate_sp(MemorySegment x0) {
        var mh$ = doupdate_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle echo_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$2,"echo_sp");
    }
    /**
     * {@snippet :
     * int echo_sp(SCREEN*);
     * }
     */
    public static int echo_sp(MemorySegment x0) {
        var mh$ = echo_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle endwin_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$3,"endwin_sp");
    }
    /**
     * {@snippet :
     * int endwin_sp(SCREEN*);
     * }
     */
    public static int endwin_sp(MemorySegment x0) {
        var mh$ = endwin_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erasechar_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$5,"erasechar_sp");
    }
    /**
     * {@snippet :
     * char erasechar_sp(SCREEN*);
     * }
     */
    public static byte erasechar_sp(MemorySegment x0) {
        var mh$ = erasechar_sp$MH();
        try {
            return (byte)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle filter_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$93.const$0,"filter_sp");
    }
    /**
     * {@snippet :
     * void filter_sp(SCREEN*);
     * }
     */
    public static void filter_sp(MemorySegment x0) {
        var mh$ = filter_sp$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle flash_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$93.const$1,"flash_sp");
    }
    /**
     * {@snippet :
     * int flash_sp(SCREEN*);
     * }
     */
    public static int flash_sp(MemorySegment x0) {
        var mh$ = flash_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle flushinp_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$93.const$2,"flushinp_sp");
    }
    /**
     * {@snippet :
     * int flushinp_sp(SCREEN*);
     * }
     */
    public static int flushinp_sp(MemorySegment x0) {
        var mh$ = flushinp_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getwin_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$93.const$3,"getwin_sp");
    }
    /**
     * {@snippet :
     * WINDOW* getwin_sp(SCREEN*, FILE*);
     * }
     */
    public static MemorySegment getwin_sp(MemorySegment x0, MemorySegment x1) {
        var mh$ = getwin_sp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle halfdelay_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$93.const$4,"halfdelay_sp");
    }
    /**
     * {@snippet :
     * int halfdelay_sp(SCREEN*, int);
     * }
     */
    public static int halfdelay_sp(MemorySegment x0, int x1) {
        var mh$ = halfdelay_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle has_colors_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$93.const$5,"has_colors_sp");
    }
    /**
     * {@snippet :
     * _Bool has_colors_sp(SCREEN*);
     * }
     */
    public static boolean has_colors_sp(MemorySegment x0) {
        var mh$ = has_colors_sp$MH();
        try {
            return (boolean)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle has_ic_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$94.const$0,"has_ic_sp");
    }
    /**
     * {@snippet :
     * _Bool has_ic_sp(SCREEN*);
     * }
     */
    public static boolean has_ic_sp(MemorySegment x0) {
        var mh$ = has_ic_sp$MH();
        try {
            return (boolean)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle has_il_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$94.const$1,"has_il_sp");
    }
    /**
     * {@snippet :
     * _Bool has_il_sp(SCREEN*);
     * }
     */
    public static boolean has_il_sp(MemorySegment x0) {
        var mh$ = has_il_sp$MH();
        try {
            return (boolean)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle init_color_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$94.const$3,"init_color_sp");
    }
    /**
     * {@snippet :
     * int init_color_sp(SCREEN*, short, short, short, short);
     * }
     */
    public static int init_color_sp(MemorySegment x0, short x1, short x2, short x3, short x4) {
        var mh$ = init_color_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle init_pair_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$94.const$5,"init_pair_sp");
    }
    /**
     * {@snippet :
     * int init_pair_sp(SCREEN*, short, short, short);
     * }
     */
    public static int init_pair_sp(MemorySegment x0, short x1, short x2, short x3) {
        var mh$ = init_pair_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle intrflush_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$95.const$1,"intrflush_sp");
    }
    /**
     * {@snippet :
     * int intrflush_sp(SCREEN*, WINDOW*, _Bool);
     * }
     */
    public static int intrflush_sp(MemorySegment x0, MemorySegment x1, boolean x2) {
        var mh$ = intrflush_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isendwin_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$95.const$2,"isendwin_sp");
    }
    /**
     * {@snippet :
     * _Bool isendwin_sp(SCREEN*);
     * }
     */
    public static boolean isendwin_sp(MemorySegment x0) {
        var mh$ = isendwin_sp$MH();
        try {
            return (boolean)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle keyname_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$95.const$4,"keyname_sp");
    }
    /**
     * {@snippet :
     * char* keyname_sp(SCREEN*, int);
     * }
     */
    public static MemorySegment keyname_sp(MemorySegment x0, int x1) {
        var mh$ = keyname_sp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle killchar_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$95.const$5,"killchar_sp");
    }
    /**
     * {@snippet :
     * char killchar_sp(SCREEN*);
     * }
     */
    public static byte killchar_sp(MemorySegment x0) {
        var mh$ = killchar_sp$MH();
        try {
            return (byte)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle longname_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$96.const$0,"longname_sp");
    }
    /**
     * {@snippet :
     * char* longname_sp(SCREEN*);
     * }
     */
    public static MemorySegment longname_sp(MemorySegment x0) {
        var mh$ = longname_sp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mvcur_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$96.const$1,"mvcur_sp");
    }
    /**
     * {@snippet :
     * int mvcur_sp(SCREEN*, int, int, int, int);
     * }
     */
    public static int mvcur_sp(MemorySegment x0, int x1, int x2, int x3, int x4) {
        var mh$ = mvcur_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle napms_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$96.const$2,"napms_sp");
    }
    /**
     * {@snippet :
     * int napms_sp(SCREEN*, int);
     * }
     */
    public static int napms_sp(MemorySegment x0, int x1) {
        var mh$ = napms_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle newpad_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$96.const$4,"newpad_sp");
    }
    /**
     * {@snippet :
     * WINDOW* newpad_sp(SCREEN*, int, int);
     * }
     */
    public static MemorySegment newpad_sp(MemorySegment x0, int x1, int x2) {
        var mh$ = newpad_sp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle newterm_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$96.const$6,"newterm_sp");
    }
    /**
     * {@snippet :
     * SCREEN* newterm_sp(SCREEN*, char*, FILE*, FILE*);
     * }
     */
    public static MemorySegment newterm_sp(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = newterm_sp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle newwin_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$97.const$0,"newwin_sp");
    }
    /**
     * {@snippet :
     * WINDOW* newwin_sp(SCREEN*, int, int, int, int);
     * }
     */
    public static MemorySegment newwin_sp(MemorySegment x0, int x1, int x2, int x3, int x4) {
        var mh$ = newwin_sp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nl_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$97.const$1,"nl_sp");
    }
    /**
     * {@snippet :
     * int nl_sp(SCREEN*);
     * }
     */
    public static int nl_sp(MemorySegment x0) {
        var mh$ = nl_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nocbreak_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$97.const$2,"nocbreak_sp");
    }
    /**
     * {@snippet :
     * int nocbreak_sp(SCREEN*);
     * }
     */
    public static int nocbreak_sp(MemorySegment x0) {
        var mh$ = nocbreak_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle noecho_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$97.const$3,"noecho_sp");
    }
    /**
     * {@snippet :
     * int noecho_sp(SCREEN*);
     * }
     */
    public static int noecho_sp(MemorySegment x0) {
        var mh$ = noecho_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nonl_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$97.const$4,"nonl_sp");
    }
    /**
     * {@snippet :
     * int nonl_sp(SCREEN*);
     * }
     */
    public static int nonl_sp(MemorySegment x0) {
        var mh$ = nonl_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle noqiflush_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$97.const$5,"noqiflush_sp");
    }
    /**
     * {@snippet :
     * void noqiflush_sp(SCREEN*);
     * }
     */
    public static void noqiflush_sp(MemorySegment x0) {
        var mh$ = noqiflush_sp$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle noraw_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$0,"noraw_sp");
    }
    /**
     * {@snippet :
     * int noraw_sp(SCREEN*);
     * }
     */
    public static int noraw_sp(MemorySegment x0) {
        var mh$ = noraw_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pair_content_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$2,"pair_content_sp");
    }
    /**
     * {@snippet :
     * int pair_content_sp(SCREEN*, short, short*, short*);
     * }
     */
    public static int pair_content_sp(MemorySegment x0, short x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = pair_content_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle qiflush_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$3,"qiflush_sp");
    }
    /**
     * {@snippet :
     * void qiflush_sp(SCREEN*);
     * }
     */
    public static void qiflush_sp(MemorySegment x0) {
        var mh$ = qiflush_sp$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle raw_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$4,"raw_sp");
    }
    /**
     * {@snippet :
     * int raw_sp(SCREEN*);
     * }
     */
    public static int raw_sp(MemorySegment x0) {
        var mh$ = raw_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle reset_prog_mode_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$5,"reset_prog_mode_sp");
    }
    /**
     * {@snippet :
     * int reset_prog_mode_sp(SCREEN*);
     * }
     */
    public static int reset_prog_mode_sp(MemorySegment x0) {
        var mh$ = reset_prog_mode_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle reset_shell_mode_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$99.const$0,"reset_shell_mode_sp");
    }
    /**
     * {@snippet :
     * int reset_shell_mode_sp(SCREEN*);
     * }
     */
    public static int reset_shell_mode_sp(MemorySegment x0) {
        var mh$ = reset_shell_mode_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle resetty_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$99.const$1,"resetty_sp");
    }
    /**
     * {@snippet :
     * int resetty_sp(SCREEN*);
     * }
     */
    public static int resetty_sp(MemorySegment x0) {
        var mh$ = resetty_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ripoffline_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$99.const$3,"ripoffline_sp");
    }
    /**
     * {@snippet :
     * int ripoffline_sp(SCREEN*, int, int (*)(WINDOW*,int));
     * }
     */
    public static int ripoffline_sp(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = ripoffline_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle savetty_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$99.const$4,"savetty_sp");
    }
    /**
     * {@snippet :
     * int savetty_sp(SCREEN*);
     * }
     */
    public static int savetty_sp(MemorySegment x0) {
        var mh$ = savetty_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scr_init_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$99.const$5,"scr_init_sp");
    }
    /**
     * {@snippet :
     * int scr_init_sp(SCREEN*, char*);
     * }
     */
    public static int scr_init_sp(MemorySegment x0, MemorySegment x1) {
        var mh$ = scr_init_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scr_restore_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$100.const$0,"scr_restore_sp");
    }
    /**
     * {@snippet :
     * int scr_restore_sp(SCREEN*, char*);
     * }
     */
    public static int scr_restore_sp(MemorySegment x0, MemorySegment x1) {
        var mh$ = scr_restore_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scr_set_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$100.const$1,"scr_set_sp");
    }
    /**
     * {@snippet :
     * int scr_set_sp(SCREEN*, char*);
     * }
     */
    public static int scr_set_sp(MemorySegment x0, MemorySegment x1) {
        var mh$ = scr_set_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle slk_attroff_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$100.const$2,"slk_attroff_sp");
    }
    /**
     * {@snippet :
     * int slk_attroff_sp(SCREEN*, const chtype);
     * }
     */
    public static int slk_attroff_sp(MemorySegment x0, int x1) {
        var mh$ = slk_attroff_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle slk_attron_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$100.const$3,"slk_attron_sp");
    }
    /**
     * {@snippet :
     * int slk_attron_sp(SCREEN*, const chtype);
     * }
     */
    public static int slk_attron_sp(MemorySegment x0, int x1) {
        var mh$ = slk_attron_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle slk_attrset_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$100.const$4,"slk_attrset_sp");
    }
    /**
     * {@snippet :
     * int slk_attrset_sp(SCREEN*, const chtype);
     * }
     */
    public static int slk_attrset_sp(MemorySegment x0, int x1) {
        var mh$ = slk_attrset_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle slk_attr_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$100.const$5,"slk_attr_sp");
    }
    /**
     * {@snippet :
     * attr_t slk_attr_sp(SCREEN*);
     * }
     */
    public static int slk_attr_sp(MemorySegment x0) {
        var mh$ = slk_attr_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle slk_attr_set_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$0,"slk_attr_set_sp");
    }
    /**
     * {@snippet :
     * int slk_attr_set_sp(SCREEN*, const attr_t, short, void*);
     * }
     */
    public static int slk_attr_set_sp(MemorySegment x0, int x1, short x2, MemorySegment x3) {
        var mh$ = slk_attr_set_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle slk_clear_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$1,"slk_clear_sp");
    }
    /**
     * {@snippet :
     * int slk_clear_sp(SCREEN*);
     * }
     */
    public static int slk_clear_sp(MemorySegment x0) {
        var mh$ = slk_clear_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle slk_color_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$3,"slk_color_sp");
    }
    /**
     * {@snippet :
     * int slk_color_sp(SCREEN*, short);
     * }
     */
    public static int slk_color_sp(MemorySegment x0, short x1) {
        var mh$ = slk_color_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle slk_init_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$4,"slk_init_sp");
    }
    /**
     * {@snippet :
     * int slk_init_sp(SCREEN*, int);
     * }
     */
    public static int slk_init_sp(MemorySegment x0, int x1) {
        var mh$ = slk_init_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle slk_label_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$5,"slk_label_sp");
    }
    /**
     * {@snippet :
     * char* slk_label_sp(SCREEN*, int);
     * }
     */
    public static MemorySegment slk_label_sp(MemorySegment x0, int x1) {
        var mh$ = slk_label_sp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle slk_noutrefresh_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$0,"slk_noutrefresh_sp");
    }
    /**
     * {@snippet :
     * int slk_noutrefresh_sp(SCREEN*);
     * }
     */
    public static int slk_noutrefresh_sp(MemorySegment x0) {
        var mh$ = slk_noutrefresh_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle slk_refresh_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$1,"slk_refresh_sp");
    }
    /**
     * {@snippet :
     * int slk_refresh_sp(SCREEN*);
     * }
     */
    public static int slk_refresh_sp(MemorySegment x0) {
        var mh$ = slk_refresh_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle slk_restore_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$2,"slk_restore_sp");
    }
    /**
     * {@snippet :
     * int slk_restore_sp(SCREEN*);
     * }
     */
    public static int slk_restore_sp(MemorySegment x0) {
        var mh$ = slk_restore_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle slk_set_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$4,"slk_set_sp");
    }
    /**
     * {@snippet :
     * int slk_set_sp(SCREEN*, int, char*, int);
     * }
     */
    public static int slk_set_sp(MemorySegment x0, int x1, MemorySegment x2, int x3) {
        var mh$ = slk_set_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle slk_touch_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$5,"slk_touch_sp");
    }
    /**
     * {@snippet :
     * int slk_touch_sp(SCREEN*);
     * }
     */
    public static int slk_touch_sp(MemorySegment x0) {
        var mh$ = slk_touch_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle start_color_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$0,"start_color_sp");
    }
    /**
     * {@snippet :
     * int start_color_sp(SCREEN*);
     * }
     */
    public static int start_color_sp(MemorySegment x0) {
        var mh$ = start_color_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle termattrs_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$1,"termattrs_sp");
    }
    /**
     * {@snippet :
     * chtype termattrs_sp(SCREEN*);
     * }
     */
    public static int termattrs_sp(MemorySegment x0) {
        var mh$ = termattrs_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle termname_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$2,"termname_sp");
    }
    /**
     * {@snippet :
     * char* termname_sp(SCREEN*);
     * }
     */
    public static MemorySegment termname_sp(MemorySegment x0) {
        var mh$ = termname_sp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle typeahead_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$3,"typeahead_sp");
    }
    /**
     * {@snippet :
     * int typeahead_sp(SCREEN*, int);
     * }
     */
    public static int typeahead_sp(MemorySegment x0, int x1) {
        var mh$ = typeahead_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ungetch_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$4,"ungetch_sp");
    }
    /**
     * {@snippet :
     * int ungetch_sp(SCREEN*, int);
     * }
     */
    public static int ungetch_sp(MemorySegment x0, int x1) {
        var mh$ = ungetch_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle use_env_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$5,"use_env_sp");
    }
    /**
     * {@snippet :
     * void use_env_sp(SCREEN*, _Bool);
     * }
     */
    public static void use_env_sp(MemorySegment x0, boolean x1) {
        var mh$ = use_env_sp$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle use_tioctl_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$0,"use_tioctl_sp");
    }
    /**
     * {@snippet :
     * void use_tioctl_sp(SCREEN*, _Bool);
     * }
     */
    public static void use_tioctl_sp(MemorySegment x0, boolean x1) {
        var mh$ = use_tioctl_sp$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vidattr_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$1,"vidattr_sp");
    }
    /**
     * {@snippet :
     * int vidattr_sp(SCREEN*, chtype);
     * }
     */
    public static int vidattr_sp(MemorySegment x0, int x1) {
        var mh$ = vidattr_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vidputs_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$2,"vidputs_sp");
    }
    /**
     * {@snippet :
     * int vidputs_sp(SCREEN*, chtype, NCURSES_OUTC_sp);
     * }
     */
    public static int vidputs_sp(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = vidputs_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle alloc_pair_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$3,"alloc_pair_sp");
    }
    /**
     * {@snippet :
     * int alloc_pair_sp(SCREEN*, int, int);
     * }
     */
    public static int alloc_pair_sp(MemorySegment x0, int x1, int x2) {
        var mh$ = alloc_pair_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle assume_default_colors_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$4,"assume_default_colors_sp");
    }
    /**
     * {@snippet :
     * int assume_default_colors_sp(SCREEN*, int, int);
     * }
     */
    public static int assume_default_colors_sp(MemorySegment x0, int x1, int x2) {
        var mh$ = assume_default_colors_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle define_key_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$5,"define_key_sp");
    }
    /**
     * {@snippet :
     * int define_key_sp(SCREEN*, char*, int);
     * }
     */
    public static int define_key_sp(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = define_key_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle extended_color_content_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$1,"extended_color_content_sp");
    }
    /**
     * {@snippet :
     * int extended_color_content_sp(SCREEN*, int, int*, int*, int*);
     * }
     */
    public static int extended_color_content_sp(MemorySegment x0, int x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = extended_color_content_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle extended_pair_content_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$3,"extended_pair_content_sp");
    }
    /**
     * {@snippet :
     * int extended_pair_content_sp(SCREEN*, int, int*, int*);
     * }
     */
    public static int extended_pair_content_sp(MemorySegment x0, int x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = extended_pair_content_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle extended_slk_color_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$4,"extended_slk_color_sp");
    }
    /**
     * {@snippet :
     * int extended_slk_color_sp(SCREEN*, int);
     * }
     */
    public static int extended_slk_color_sp(MemorySegment x0, int x1) {
        var mh$ = extended_slk_color_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle find_pair_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$5,"find_pair_sp");
    }
    /**
     * {@snippet :
     * int find_pair_sp(SCREEN*, int, int);
     * }
     */
    public static int find_pair_sp(MemorySegment x0, int x1, int x2) {
        var mh$ = find_pair_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle free_pair_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$0,"free_pair_sp");
    }
    /**
     * {@snippet :
     * int free_pair_sp(SCREEN*, int);
     * }
     */
    public static int free_pair_sp(MemorySegment x0, int x1) {
        var mh$ = free_pair_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle get_escdelay_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$1,"get_escdelay_sp");
    }
    /**
     * {@snippet :
     * int get_escdelay_sp(SCREEN*);
     * }
     */
    public static int get_escdelay_sp(MemorySegment x0) {
        var mh$ = get_escdelay_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle init_extended_color_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$2,"init_extended_color_sp");
    }
    /**
     * {@snippet :
     * int init_extended_color_sp(SCREEN*, int, int, int, int);
     * }
     */
    public static int init_extended_color_sp(MemorySegment x0, int x1, int x2, int x3, int x4) {
        var mh$ = init_extended_color_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle init_extended_pair_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$3,"init_extended_pair_sp");
    }
    /**
     * {@snippet :
     * int init_extended_pair_sp(SCREEN*, int, int, int);
     * }
     */
    public static int init_extended_pair_sp(MemorySegment x0, int x1, int x2, int x3) {
        var mh$ = init_extended_pair_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle is_cbreak_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$4,"is_cbreak_sp");
    }
    /**
     * {@snippet :
     * int is_cbreak_sp(SCREEN*);
     * }
     */
    public static int is_cbreak_sp(MemorySegment x0) {
        var mh$ = is_cbreak_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle is_echo_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$5,"is_echo_sp");
    }
    /**
     * {@snippet :
     * int is_echo_sp(SCREEN*);
     * }
     */
    public static int is_echo_sp(MemorySegment x0) {
        var mh$ = is_echo_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle is_nl_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$0,"is_nl_sp");
    }
    /**
     * {@snippet :
     * int is_nl_sp(SCREEN*);
     * }
     */
    public static int is_nl_sp(MemorySegment x0) {
        var mh$ = is_nl_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle is_raw_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$1,"is_raw_sp");
    }
    /**
     * {@snippet :
     * int is_raw_sp(SCREEN*);
     * }
     */
    public static int is_raw_sp(MemorySegment x0) {
        var mh$ = is_raw_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle is_term_resized_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$3,"is_term_resized_sp");
    }
    /**
     * {@snippet :
     * _Bool is_term_resized_sp(SCREEN*, int, int);
     * }
     */
    public static boolean is_term_resized_sp(MemorySegment x0, int x1, int x2) {
        var mh$ = is_term_resized_sp$MH();
        try {
            return (boolean)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle key_defined_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$4,"key_defined_sp");
    }
    /**
     * {@snippet :
     * int key_defined_sp(SCREEN*, char*);
     * }
     */
    public static int key_defined_sp(MemorySegment x0, MemorySegment x1) {
        var mh$ = key_defined_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle keybound_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$5,"keybound_sp");
    }
    /**
     * {@snippet :
     * char* keybound_sp(SCREEN*, int, int);
     * }
     */
    public static MemorySegment keybound_sp(MemorySegment x0, int x1, int x2) {
        var mh$ = keybound_sp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle keyok_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$1,"keyok_sp");
    }
    /**
     * {@snippet :
     * int keyok_sp(SCREEN*, int, _Bool);
     * }
     */
    public static int keyok_sp(MemorySegment x0, int x1, boolean x2) {
        var mh$ = keyok_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nofilter_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$2,"nofilter_sp");
    }
    /**
     * {@snippet :
     * void nofilter_sp(SCREEN*);
     * }
     */
    public static void nofilter_sp(MemorySegment x0) {
        var mh$ = nofilter_sp$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle reset_color_pairs_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$3,"reset_color_pairs_sp");
    }
    /**
     * {@snippet :
     * void reset_color_pairs_sp(SCREEN*);
     * }
     */
    public static void reset_color_pairs_sp(MemorySegment x0) {
        var mh$ = reset_color_pairs_sp$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle resize_term_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$4,"resize_term_sp");
    }
    /**
     * {@snippet :
     * int resize_term_sp(SCREEN*, int, int);
     * }
     */
    public static int resize_term_sp(MemorySegment x0, int x1, int x2) {
        var mh$ = resize_term_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle resizeterm_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$5,"resizeterm_sp");
    }
    /**
     * {@snippet :
     * int resizeterm_sp(SCREEN*, int, int);
     * }
     */
    public static int resizeterm_sp(MemorySegment x0, int x1, int x2) {
        var mh$ = resizeterm_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle set_escdelay_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$0,"set_escdelay_sp");
    }
    /**
     * {@snippet :
     * int set_escdelay_sp(SCREEN*, int);
     * }
     */
    public static int set_escdelay_sp(MemorySegment x0, int x1) {
        var mh$ = set_escdelay_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle set_tabsize_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$1,"set_tabsize_sp");
    }
    /**
     * {@snippet :
     * int set_tabsize_sp(SCREEN*, int);
     * }
     */
    public static int set_tabsize_sp(MemorySegment x0, int x1) {
        var mh$ = set_tabsize_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle use_default_colors_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$2,"use_default_colors_sp");
    }
    /**
     * {@snippet :
     * int use_default_colors_sp(SCREEN*);
     * }
     */
    public static int use_default_colors_sp(MemorySegment x0) {
        var mh$ = use_default_colors_sp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle use_legacy_coding_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$3,"use_legacy_coding_sp");
    }
    /**
     * {@snippet :
     * int use_legacy_coding_sp(SCREEN*, int);
     * }
     */
    public static int use_legacy_coding_sp(MemorySegment x0, int x1) {
        var mh$ = use_legacy_coding_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout curscr$LAYOUT() {
        return RuntimeHelper.POINTER;
    }
    public static VarHandle curscr$VH() {
        return constants$8.const$4;
    }
    public static MemorySegment curscr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$109.const$4,"curscr");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * WINDOW* curscr;
     * }
     */
    public static MemorySegment curscr$get() {
        return (java.lang.foreign.MemorySegment) constants$8.const$4.get(RuntimeHelper.requireNonNull(constants$109.const$4, "curscr"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * WINDOW* curscr;
     * }
     */
    public static void curscr$set(MemorySegment x) {
        constants$8.const$4.set(RuntimeHelper.requireNonNull(constants$109.const$4, "curscr"), x);
    }
    public static MemoryLayout newscr$LAYOUT() {
        return RuntimeHelper.POINTER;
    }
    public static VarHandle newscr$VH() {
        return constants$8.const$4;
    }
    public static MemorySegment newscr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$109.const$5,"newscr");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * WINDOW* newscr;
     * }
     */
    public static MemorySegment newscr$get() {
        return (java.lang.foreign.MemorySegment) constants$8.const$4.get(RuntimeHelper.requireNonNull(constants$109.const$5, "newscr"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * WINDOW* newscr;
     * }
     */
    public static void newscr$set(MemorySegment x) {
        constants$8.const$4.set(RuntimeHelper.requireNonNull(constants$109.const$5, "newscr"), x);
    }
    public static MemoryLayout stdscr$LAYOUT() {
        return RuntimeHelper.POINTER;
    }
    public static VarHandle stdscr$VH() {
        return constants$8.const$4;
    }
    public static MemorySegment stdscr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$110.const$0,"stdscr");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * WINDOW* stdscr;
     * }
     */
    public static MemorySegment stdscr$get() {
        return (java.lang.foreign.MemorySegment) constants$8.const$4.get(RuntimeHelper.requireNonNull(constants$110.const$0, "stdscr"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * WINDOW* stdscr;
     * }
     */
    public static void stdscr$set(MemorySegment x) {
        constants$8.const$4.set(RuntimeHelper.requireNonNull(constants$110.const$0, "stdscr"), x);
    }
    public static MemoryLayout COLORS$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle COLORS$VH() {
        return constants$110.const$1;
    }
    public static MemorySegment COLORS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$110.const$2,"COLORS");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int COLORS;
     * }
     */
    public static int COLORS$get() {
        return (int) constants$110.const$1.get(RuntimeHelper.requireNonNull(constants$110.const$2, "COLORS"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int COLORS;
     * }
     */
    public static void COLORS$set(int x) {
        constants$110.const$1.set(RuntimeHelper.requireNonNull(constants$110.const$2, "COLORS"), x);
    }
    public static MemoryLayout COLOR_PAIRS$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle COLOR_PAIRS$VH() {
        return constants$110.const$1;
    }
    public static MemorySegment COLOR_PAIRS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$110.const$3,"COLOR_PAIRS");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int COLOR_PAIRS;
     * }
     */
    public static int COLOR_PAIRS$get() {
        return (int) constants$110.const$1.get(RuntimeHelper.requireNonNull(constants$110.const$3, "COLOR_PAIRS"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int COLOR_PAIRS;
     * }
     */
    public static void COLOR_PAIRS$set(int x) {
        constants$110.const$1.set(RuntimeHelper.requireNonNull(constants$110.const$3, "COLOR_PAIRS"), x);
    }
    public static MemoryLayout COLS$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle COLS$VH() {
        return constants$110.const$1;
    }
    public static MemorySegment COLS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$110.const$4,"COLS");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int COLS;
     * }
     */
    public static int COLS$get() {
        return (int) constants$110.const$1.get(RuntimeHelper.requireNonNull(constants$110.const$4, "COLS"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int COLS;
     * }
     */
    public static void COLS$set(int x) {
        constants$110.const$1.set(RuntimeHelper.requireNonNull(constants$110.const$4, "COLS"), x);
    }
    public static MemoryLayout ESCDELAY$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle ESCDELAY$VH() {
        return constants$110.const$1;
    }
    public static MemorySegment ESCDELAY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$110.const$5,"ESCDELAY");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int ESCDELAY;
     * }
     */
    public static int ESCDELAY$get() {
        return (int) constants$110.const$1.get(RuntimeHelper.requireNonNull(constants$110.const$5, "ESCDELAY"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int ESCDELAY;
     * }
     */
    public static void ESCDELAY$set(int x) {
        constants$110.const$1.set(RuntimeHelper.requireNonNull(constants$110.const$5, "ESCDELAY"), x);
    }
    public static MemoryLayout LINES$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle LINES$VH() {
        return constants$110.const$1;
    }
    public static MemorySegment LINES$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$111.const$0,"LINES");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int LINES;
     * }
     */
    public static int LINES$get() {
        return (int) constants$110.const$1.get(RuntimeHelper.requireNonNull(constants$111.const$0, "LINES"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int LINES;
     * }
     */
    public static void LINES$set(int x) {
        constants$110.const$1.set(RuntimeHelper.requireNonNull(constants$111.const$0, "LINES"), x);
    }
    public static MemoryLayout TABSIZE$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle TABSIZE$VH() {
        return constants$110.const$1;
    }
    public static MemorySegment TABSIZE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$111.const$1,"TABSIZE");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int TABSIZE;
     * }
     */
    public static int TABSIZE$get() {
        return (int) constants$110.const$1.get(RuntimeHelper.requireNonNull(constants$111.const$1, "TABSIZE"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int TABSIZE;
     * }
     */
    public static void TABSIZE$set(int x) {
        constants$110.const$1.set(RuntimeHelper.requireNonNull(constants$111.const$1, "TABSIZE"), x);
    }
    public static MethodHandle has_mouse$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$2,"has_mouse");
    }
    /**
     * {@snippet :
     * _Bool has_mouse();
     * }
     */
    public static boolean has_mouse() {
        var mh$ = has_mouse$MH();
        try {
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getmouse$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$3,"getmouse");
    }
    /**
     * {@snippet :
     * int getmouse(MEVENT*);
     * }
     */
    public static int getmouse(MemorySegment x0) {
        var mh$ = getmouse$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ungetmouse$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$4,"ungetmouse");
    }
    /**
     * {@snippet :
     * int ungetmouse(MEVENT*);
     * }
     */
    public static int ungetmouse(MemorySegment x0) {
        var mh$ = ungetmouse$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mousemask$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$5,"mousemask");
    }
    /**
     * {@snippet :
     * mmask_t mousemask(mmask_t, mmask_t*);
     * }
     */
    public static int mousemask(int x0, MemorySegment x1) {
        var mh$ = mousemask$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wenclose$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$0,"wenclose");
    }
    /**
     * {@snippet :
     * _Bool wenclose(const WINDOW*, int, int);
     * }
     */
    public static boolean wenclose(MemorySegment x0, int x1, int x2) {
        var mh$ = wenclose$MH();
        try {
            return (boolean)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mouseinterval$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$1,"mouseinterval");
    }
    /**
     * {@snippet :
     * int mouseinterval(int);
     * }
     */
    public static int mouseinterval(int x0) {
        var mh$ = mouseinterval$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wmouse_trafo$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$3,"wmouse_trafo");
    }
    /**
     * {@snippet :
     * _Bool wmouse_trafo(const WINDOW*, int*, int*, _Bool);
     * }
     */
    public static boolean wmouse_trafo(MemorySegment x0, MemorySegment x1, MemorySegment x2, boolean x3) {
        var mh$ = wmouse_trafo$MH();
        try {
            return (boolean)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mouse_trafo$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$5,"mouse_trafo");
    }
    /**
     * {@snippet :
     * _Bool mouse_trafo(int*, int*, _Bool);
     * }
     */
    public static boolean mouse_trafo(MemorySegment x0, MemorySegment x1, boolean x2) {
        var mh$ = mouse_trafo$MH();
        try {
            return (boolean)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle has_mouse_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$114.const$0,"has_mouse_sp");
    }
    /**
     * {@snippet :
     * _Bool has_mouse_sp(SCREEN*);
     * }
     */
    public static boolean has_mouse_sp(MemorySegment x0) {
        var mh$ = has_mouse_sp$MH();
        try {
            return (boolean)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getmouse_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$114.const$1,"getmouse_sp");
    }
    /**
     * {@snippet :
     * int getmouse_sp(SCREEN*, MEVENT*);
     * }
     */
    public static int getmouse_sp(MemorySegment x0, MemorySegment x1) {
        var mh$ = getmouse_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ungetmouse_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$114.const$2,"ungetmouse_sp");
    }
    /**
     * {@snippet :
     * int ungetmouse_sp(SCREEN*, MEVENT*);
     * }
     */
    public static int ungetmouse_sp(MemorySegment x0, MemorySegment x1) {
        var mh$ = ungetmouse_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mousemask_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$114.const$3,"mousemask_sp");
    }
    /**
     * {@snippet :
     * mmask_t mousemask_sp(SCREEN*, mmask_t, mmask_t*);
     * }
     */
    public static int mousemask_sp(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = mousemask_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mouseinterval_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$114.const$4,"mouseinterval_sp");
    }
    /**
     * {@snippet :
     * int mouseinterval_sp(SCREEN*, int);
     * }
     */
    public static int mouseinterval_sp(MemorySegment x0, int x1) {
        var mh$ = mouseinterval_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mcprint$MH() {
        return RuntimeHelper.requireNonNull(constants$114.const$5,"mcprint");
    }
    /**
     * {@snippet :
     * int mcprint(char*, int);
     * }
     */
    public static int mcprint(MemorySegment x0, int x1) {
        var mh$ = mcprint$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle has_key$MH() {
        return RuntimeHelper.requireNonNull(constants$115.const$0,"has_key");
    }
    /**
     * {@snippet :
     * int has_key(int);
     * }
     */
    public static int has_key(int x0) {
        var mh$ = has_key$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle has_key_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$115.const$1,"has_key_sp");
    }
    /**
     * {@snippet :
     * int has_key_sp(SCREEN*, int);
     * }
     */
    public static int has_key_sp(MemorySegment x0, int x1) {
        var mh$ = has_key_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mcprint_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$115.const$2,"mcprint_sp");
    }
    /**
     * {@snippet :
     * int mcprint_sp(SCREEN*, char*, int);
     * }
     */
    public static int mcprint_sp(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = mcprint_sp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _tracef$MH() {
        return RuntimeHelper.requireNonNull(constants$115.const$3,"_tracef");
    }
    /**
     * {@snippet :
     * void _tracef(char*,...);
     * }
     */
    public static void _tracef(MemorySegment x0, Object... x1) {
        var mh$ = _tracef$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _traceattr$MH() {
        return RuntimeHelper.requireNonNull(constants$115.const$4,"_traceattr");
    }
    /**
     * {@snippet :
     * char* _traceattr(attr_t);
     * }
     */
    public static MemorySegment _traceattr(int x0) {
        var mh$ = _traceattr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _traceattr2$MH() {
        return RuntimeHelper.requireNonNull(constants$115.const$5,"_traceattr2");
    }
    /**
     * {@snippet :
     * char* _traceattr2(int, chtype);
     * }
     */
    public static MemorySegment _traceattr2(int x0, int x1) {
        var mh$ = _traceattr2$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _tracechar$MH() {
        return RuntimeHelper.requireNonNull(constants$116.const$0,"_tracechar");
    }
    /**
     * {@snippet :
     * char* _tracechar(int);
     * }
     */
    public static MemorySegment _tracechar(int x0) {
        var mh$ = _tracechar$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _tracechtype$MH() {
        return RuntimeHelper.requireNonNull(constants$116.const$1,"_tracechtype");
    }
    /**
     * {@snippet :
     * char* _tracechtype(chtype);
     * }
     */
    public static MemorySegment _tracechtype(int x0) {
        var mh$ = _tracechtype$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _tracechtype2$MH() {
        return RuntimeHelper.requireNonNull(constants$116.const$2,"_tracechtype2");
    }
    /**
     * {@snippet :
     * char* _tracechtype2(int, chtype);
     * }
     */
    public static MemorySegment _tracechtype2(int x0, int x1) {
        var mh$ = _tracechtype2$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle trace$MH() {
        return RuntimeHelper.requireNonNull(constants$116.const$3,"trace");
    }
    /**
     * {@snippet :
     * void trace(unsigned int);
     * }
     */
    public static void trace(int x0) {
        var mh$ = trace$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curses_trace$MH() {
        return RuntimeHelper.requireNonNull(constants$116.const$4,"curses_trace");
    }
    /**
     * {@snippet :
     * unsigned int curses_trace(unsigned int);
     * }
     */
    public static int curses_trace(int x0) {
        var mh$ = curses_trace$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exit_curses$MH() {
        return RuntimeHelper.requireNonNull(constants$116.const$5,"exit_curses");
    }
    /**
     * {@snippet :
     * void exit_curses(int);
     * }
     */
    public static void exit_curses(int x0) {
        var mh$ = exit_curses$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$117.const$0,"unctrl");
    }
    /**
     * {@snippet :
     * char* unctrl(chtype);
     * }
     */
    public static MemorySegment unctrl(int x0) {
        var mh$ = unctrl$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unctrl_sp$MH() {
        return RuntimeHelper.requireNonNull(constants$117.const$1,"unctrl_sp");
    }
    /**
     * {@snippet :
     * char* unctrl_sp(SCREEN*, chtype);
     * }
     */
    public static MemorySegment unctrl_sp(MemorySegment x0, int x1) {
        var mh$ = unctrl_sp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * #define NCURSES_VERSION "6.4"
     * }
     */
    public static MemorySegment NCURSES_VERSION() {
        return constants$117.const$2;
    }
    /**
     * {@snippet :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return 201404L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return 201404L;
    }
    /**
     * {@snippet :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    /**
     * {@snippet :
     * #define __WCHAR_MAX 2147483647
     * }
     */
    public static int __WCHAR_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define __WCHAR_MIN -2147483648
     * }
     */
    public static int __WCHAR_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT_FAST16_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST16_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_FAST32_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST32_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define INT_FAST16_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST16_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define INT_FAST32_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST32_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST16_MAX -1
     * }
     */
    public static long UINT_FAST16_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST32_MAX -1
     * }
     */
    public static long UINT_FAST32_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define WINT_MIN 0
     * }
     */
    public static int WINT_MIN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINT_MAX 4294967295
     * }
     */
    public static int WINT_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define NULL 0
     * }
     */
    public static MemorySegment NULL() {
        return constants$117.const$3;
    }
    /**
     * {@snippet :
     * #define EOF -1
     * }
     */
    public static int EOF() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define P_tmpdir "/tmp"
     * }
     */
    public static MemorySegment P_tmpdir() {
        return constants$117.const$4;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT16 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT16() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT128X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT128X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT128_UNLIKE_LDBL 0
     * }
     */
    public static int __HAVE_FLOAT128_UNLIKE_LDBL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WA_ATTRIBUTES 4294967040
     * }
     */
    public static int WA_ATTRIBUTES() {
        return (int)4294967040L;
    }
    /**
     * {@snippet :
     * #define WA_NORMAL 0
     * }
     */
    public static int WA_NORMAL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WA_STANDOUT 65536
     * }
     */
    public static int WA_STANDOUT() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * #define WA_UNDERLINE 131072
     * }
     */
    public static int WA_UNDERLINE() {
        return (int)131072L;
    }
    /**
     * {@snippet :
     * #define WA_REVERSE 262144
     * }
     */
    public static int WA_REVERSE() {
        return (int)262144L;
    }
    /**
     * {@snippet :
     * #define WA_BLINK 524288
     * }
     */
    public static int WA_BLINK() {
        return (int)524288L;
    }
    /**
     * {@snippet :
     * #define WA_DIM 1048576
     * }
     */
    public static int WA_DIM() {
        return (int)1048576L;
    }
    /**
     * {@snippet :
     * #define WA_BOLD 2097152
     * }
     */
    public static int WA_BOLD() {
        return (int)2097152L;
    }
    /**
     * {@snippet :
     * #define WA_ALTCHARSET 4194304
     * }
     */
    public static int WA_ALTCHARSET() {
        return (int)4194304L;
    }
    /**
     * {@snippet :
     * #define WA_INVIS 8388608
     * }
     */
    public static int WA_INVIS() {
        return (int)8388608L;
    }
    /**
     * {@snippet :
     * #define WA_PROTECT 16777216
     * }
     */
    public static int WA_PROTECT() {
        return (int)16777216L;
    }
    /**
     * {@snippet :
     * #define WA_HORIZONTAL 33554432
     * }
     */
    public static int WA_HORIZONTAL() {
        return (int)33554432L;
    }
    /**
     * {@snippet :
     * #define WA_LEFT 67108864
     * }
     */
    public static int WA_LEFT() {
        return (int)67108864L;
    }
    /**
     * {@snippet :
     * #define WA_LOW 134217728
     * }
     */
    public static int WA_LOW() {
        return (int)134217728L;
    }
    /**
     * {@snippet :
     * #define WA_RIGHT 268435456
     * }
     */
    public static int WA_RIGHT() {
        return (int)268435456L;
    }
    /**
     * {@snippet :
     * #define WA_TOP 536870912
     * }
     */
    public static int WA_TOP() {
        return (int)536870912L;
    }
    /**
     * {@snippet :
     * #define WA_VERTICAL 1073741824
     * }
     */
    public static int WA_VERTICAL() {
        return (int)1073741824L;
    }
    /**
     * {@snippet :
     * #define WA_ITALIC 2147483648
     * }
     */
    public static int WA_ITALIC() {
        return (int)2147483648L;
    }
    /**
     * {@snippet :
     * #define ERR -1
     * }
     */
    public static int ERR() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define OK 0
     * }
     */
    public static int OK() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _NOCHANGE -1
     * }
     */
    public static int _NOCHANGE() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define _NEWINDEX -1
     * }
     */
    public static int _NEWINDEX() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define A_NORMAL 0
     * }
     */
    public static int A_NORMAL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define A_ATTRIBUTES 4294967040
     * }
     */
    public static int A_ATTRIBUTES() {
        return (int)4294967040L;
    }
    /**
     * {@snippet :
     * #define A_CHARTEXT 255
     * }
     */
    public static int A_CHARTEXT() {
        return (int)255L;
    }
}


